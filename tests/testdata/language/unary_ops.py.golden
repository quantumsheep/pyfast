Code with transformations:
x = +1
x = -1
x = ~1
x = ~1 ^ 1 & 1 | 1 & 1 ^ -1
x = -1 * 1 / 1 + 1 * 1 - ---1 * 1

--------------------------------------------------------------------------------
AST:
program
├── file: SourceFile
│   └── filename: "tests/testdata/language/unary_ops.py"
└── statements: MultipleStatementAST
    └── statements
        ├── 0: AssignmentStatementAST
        │   ├── targets
        │   │   └── 0: NameLiteralExpressionAST
        │   │       └── value: "x"
        │   ├── type: None
        │   ├── operator: "="
        │   └── values
        │       └── 0: UnaryExpressionAST
        │           ├── expression: NumberLiteralExpressionAST
        │           │   └── value: 1
        │           └── operator: "+"
        ├── 1: AssignmentStatementAST
        │   ├── targets
        │   │   └── 0: NameLiteralExpressionAST
        │   │       └── value: "x"
        │   ├── type: None
        │   ├── operator: "="
        │   └── values
        │       └── 0: UnaryExpressionAST
        │           ├── expression: NumberLiteralExpressionAST
        │           │   └── value: 1
        │           └── operator: "-"
        ├── 2: AssignmentStatementAST
        │   ├── targets
        │   │   └── 0: NameLiteralExpressionAST
        │   │       └── value: "x"
        │   ├── type: None
        │   ├── operator: "="
        │   └── values
        │       └── 0: UnaryExpressionAST
        │           ├── expression: NumberLiteralExpressionAST
        │           │   └── value: 1
        │           └── operator: "~"
        ├── 3: AssignmentStatementAST
        │   ├── targets
        │   │   └── 0: NameLiteralExpressionAST
        │   │       └── value: "x"
        │   ├── type: None
        │   ├── operator: "="
        │   └── values
        │       └── 0: BinaryExpressionAST
        │           ├── left: BinaryExpressionAST
        │           │   ├── left: UnaryExpressionAST
        │           │   │   ├── expression: NumberLiteralExpressionAST
        │           │   │   │   └── value: 1
        │           │   │   └── operator: "~"
        │           │   ├── operator: "^"
        │           │   └── right: BinaryExpressionAST
        │           │       ├── left: NumberLiteralExpressionAST
        │           │       │   └── value: 1
        │           │       ├── operator: "&"
        │           │       └── right: NumberLiteralExpressionAST
        │           │           └── value: 1
        │           ├── operator: "|"
        │           └── right: BinaryExpressionAST
        │               ├── left: BinaryExpressionAST
        │               │   ├── left: NumberLiteralExpressionAST
        │               │   │   └── value: 1
        │               │   ├── operator: "&"
        │               │   └── right: NumberLiteralExpressionAST
        │               │       └── value: 1
        │               ├── operator: "^"
        │               └── right: UnaryExpressionAST
        │                   ├── expression: NumberLiteralExpressionAST
        │                   │   └── value: 1
        │                   └── operator: "-"
        └── 4: AssignmentStatementAST
            ├── targets
            │   └── 0: NameLiteralExpressionAST
            │       └── value: "x"
            ├── type: None
            ├── operator: "="
            └── values
                └── 0: BinaryExpressionAST
                    ├── left: BinaryExpressionAST
                    │   ├── left: BinaryExpressionAST
                    │   │   ├── left: BinaryExpressionAST
                    │   │   │   ├── left: UnaryExpressionAST
                    │   │   │   │   ├── expression: NumberLiteralExpressionAST
                    │   │   │   │   │   └── value: 1
                    │   │   │   │   └── operator: "-"
                    │   │   │   ├── operator: "*"
                    │   │   │   └── right: NumberLiteralExpressionAST
                    │   │   │       └── value: 1
                    │   │   ├── operator: "/"
                    │   │   └── right: NumberLiteralExpressionAST
                    │   │       └── value: 1
                    │   ├── operator: "+"
                    │   └── right: BinaryExpressionAST
                    │       ├── left: NumberLiteralExpressionAST
                    │       │   └── value: 1
                    │       ├── operator: "*"
                    │       └── right: NumberLiteralExpressionAST
                    │           └── value: 1
                    ├── operator: "-"
                    └── right: BinaryExpressionAST
                        ├── left: UnaryExpressionAST
                        │   ├── expression: UnaryExpressionAST
                        │   │   ├── expression: UnaryExpressionAST
                        │   │   │   ├── expression: NumberLiteralExpressionAST
                        │   │   │   │   └── value: 1
                        │   │   │   └── operator: "-"
                        │   │   └── operator: "-"
                        │   └── operator: "-"
                        ├── operator: "*"
                        └── right: NumberLiteralExpressionAST
                            └── value: 1


--------------------------------------------------------------------------------
IR:
; ModuleID = '<string>'
source_filename = "<string>"
target triple = "unknown-unknown-unknown"

define i32 @main() {
entry:
  %x = alloca i32, align 4
  store i32 1, i32* %x, align 4
  %.3 = sub i32 0, 1
  store i32 %.3, i32* %x, align 4
  %.5 = xor i32 1, -1
  store i32 %.5, i32* %x, align 4
  %.7 = xor i32 1, -1
  %.8 = and i32 1, 1
  %.9 = xor i32 %.7, %.8
  %.10 = and i32 1, 1
  %.11 = sub i32 0, 1
  %.12 = xor i32 %.10, %.11
  %.13 = or i32 %.9, %.12
  store i32 %.13, i32* %x, align 4
  %.15 = sub i32 0, 1
  %.16 = mul i32 %.15, 1
  %.17 = udiv i32 %.16, 1
  %.18 = mul i32 1, 1
  %.19 = add i32 %.17, %.18
  %.20 = sub i32 0, 1
  %.21 = sub i32 0, %.20
  %.22 = sub i32 0, %.21
  %.23 = mul i32 %.22, 1
  %.24 = sub i32 %.19, %.23
  store i32 %.24, i32* %x, align 4
  ret i32 0
}
