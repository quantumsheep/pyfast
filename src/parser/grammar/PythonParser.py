# type: ignore
# Generated from src/parser/grammar/PythonParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,97,2171,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,
        7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,
        2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,
        7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
        2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,
        7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
        2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,
        7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,
        2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,
        7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,
        2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,
        7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,
        2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,
        7,197,2,198,7,198,1,0,3,0,400,8,0,1,0,1,0,1,1,1,1,1,2,1,2,5,2,408,
        8,2,10,2,12,2,411,9,2,1,2,1,2,1,3,1,3,3,3,417,8,3,1,3,1,3,1,3,1,
        3,5,3,423,8,3,10,3,12,3,426,9,3,1,3,1,3,1,4,1,4,1,5,4,5,433,8,5,
        11,5,12,5,434,1,6,1,6,3,6,439,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,447,
        8,7,1,8,1,8,1,8,5,8,452,8,8,10,8,12,8,455,9,8,1,8,3,8,458,8,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,
        9,476,8,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,486,8,10,
        1,11,1,11,1,11,1,11,1,11,3,11,493,8,11,1,11,1,11,1,11,1,11,1,11,
        3,11,500,8,11,1,11,1,11,1,11,1,11,3,11,506,8,11,1,11,1,11,1,11,4,
        11,511,8,11,11,11,12,11,512,1,11,1,11,3,11,517,8,11,1,11,3,11,520,
        8,11,1,11,1,11,1,11,1,11,3,11,526,8,11,3,11,528,8,11,1,12,1,12,3,
        12,532,8,12,1,13,1,13,1,14,1,14,3,14,538,8,14,1,15,1,15,1,15,1,15,
        3,15,544,8,15,3,15,546,8,15,1,16,1,16,1,16,1,16,5,16,552,8,16,10,
        16,12,16,555,9,16,1,17,1,17,1,17,1,17,5,17,561,8,17,10,17,12,17,
        564,9,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,3,20,575,8,
        20,1,21,1,21,3,21,579,8,21,1,22,1,22,1,22,1,23,1,23,5,23,586,8,23,
        10,23,12,23,589,9,23,1,23,1,23,1,23,1,23,1,23,1,23,4,23,597,8,23,
        11,23,12,23,598,1,23,1,23,3,23,603,8,23,1,24,1,24,1,24,3,24,608,
        8,24,1,24,1,24,1,24,1,24,3,24,614,8,24,1,25,1,25,1,25,5,25,619,8,
        25,10,25,12,25,622,9,25,1,26,1,26,1,26,3,26,627,8,26,1,27,1,27,1,
        27,5,27,632,8,27,10,27,12,27,635,9,27,1,28,1,28,1,28,3,28,640,8,
        28,1,29,1,29,1,29,1,29,1,29,1,29,5,29,648,8,29,10,29,12,29,651,9,
        29,1,30,1,30,1,30,1,30,1,30,1,30,3,30,659,8,30,1,31,1,31,1,31,1,
        31,4,31,665,8,31,11,31,12,31,666,1,32,1,32,1,32,1,32,3,32,673,8,
        32,1,33,1,33,1,33,3,33,678,8,33,1,33,1,33,3,33,682,8,33,1,33,3,33,
        685,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,3,34,694,8,34,1,35,1,
        35,1,35,3,35,699,8,35,1,35,1,35,3,35,703,8,35,1,35,1,35,1,35,3,35,
        708,8,35,1,35,1,35,3,35,712,8,35,1,35,1,35,1,35,1,35,1,35,3,35,719,
        8,35,1,35,1,35,3,35,723,8,35,1,35,1,35,1,35,3,35,728,8,35,1,35,1,
        35,3,35,732,8,35,1,35,3,35,735,8,35,1,36,1,36,1,37,1,37,5,37,741,
        8,37,10,37,12,37,744,9,37,1,37,5,37,747,8,37,10,37,12,37,750,9,37,
        1,37,3,37,753,8,37,1,37,1,37,5,37,757,8,37,10,37,12,37,760,9,37,
        1,37,3,37,763,8,37,1,37,4,37,766,8,37,11,37,12,37,767,1,37,5,37,
        771,8,37,10,37,12,37,774,9,37,1,37,3,37,777,8,37,1,37,4,37,780,8,
        37,11,37,12,37,781,1,37,3,37,785,8,37,1,37,3,37,788,8,37,1,38,4,
        38,791,8,38,11,38,12,38,792,1,38,1,38,3,38,797,8,38,1,39,5,39,800,
        8,39,10,39,12,39,803,9,39,1,39,4,39,806,8,39,11,39,12,39,807,1,39,
        1,39,3,39,812,8,39,1,40,1,40,1,40,5,40,817,8,40,10,40,12,40,820,
        9,40,1,40,3,40,823,8,40,1,40,1,40,1,40,5,40,828,8,40,10,40,12,40,
        831,9,40,1,40,3,40,834,8,40,1,40,1,40,1,40,4,40,839,8,40,11,40,12,
        40,840,1,40,3,40,844,8,40,1,40,3,40,847,8,40,1,41,1,41,1,41,1,42,
        1,42,3,42,854,8,42,1,42,3,42,857,8,42,1,43,1,43,3,43,861,8,43,1,
        43,3,43,864,8,43,1,44,1,44,1,44,3,44,869,8,44,1,44,3,44,872,8,44,
        1,45,1,45,3,45,876,8,45,1,45,3,45,879,8,45,1,45,3,45,882,8,45,1,
        46,1,46,3,46,886,8,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,
        49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,906,8,51,3,
        51,908,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,52,916,8,52,3,52,918,
        8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,929,8,54,
        1,55,3,55,932,8,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,940,8,55,1,
        55,1,55,3,55,944,8,55,1,56,3,56,947,8,56,1,56,1,56,1,56,1,56,1,56,
        5,56,954,8,56,10,56,12,56,957,9,56,1,56,3,56,960,8,56,1,56,1,56,
        1,56,1,56,1,56,1,56,5,56,968,8,56,10,56,12,56,971,9,56,1,56,1,56,
        3,56,975,8,56,3,56,977,8,56,1,56,1,56,1,57,1,57,1,57,3,57,984,8,
        57,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,4,58,995,8,58,11,
        58,12,58,996,1,58,3,58,1000,8,58,1,58,3,58,1003,8,58,1,58,1,58,1,
        58,1,58,4,58,1009,8,58,11,58,12,58,1010,1,58,3,58,1014,8,58,1,58,
        3,58,1017,8,58,3,58,1019,8,58,1,59,1,59,1,59,1,59,3,59,1025,8,59,
        3,59,1027,8,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,3,60,1037,
        8,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,
        1,62,4,62,1052,8,62,11,62,12,62,1053,1,62,1,62,1,63,1,63,1,63,3,
        63,1061,8,63,1,63,3,63,1064,8,63,1,64,1,64,1,64,3,64,1069,8,64,1,
        64,1,64,1,64,1,65,1,65,1,65,1,66,1,66,3,66,1079,8,66,1,67,1,67,3,
        67,1083,8,67,1,68,1,68,1,68,1,68,1,69,1,69,1,69,5,69,1092,8,69,10,
        69,12,69,1095,9,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,
        1105,8,70,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1113,8,71,1,72,1,72,
        1,72,1,72,1,72,1,72,3,72,1121,8,72,1,73,1,73,1,73,1,73,1,74,3,74,
        1128,8,74,1,74,1,74,1,75,3,75,1133,8,75,1,75,1,75,1,76,1,76,1,77,
        1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,81,1,82,1,82,1,82,4,82,
        1152,8,82,11,82,12,82,1153,1,83,1,83,1,83,5,83,1159,8,83,10,83,12,
        83,1162,9,83,1,84,1,84,1,84,1,84,1,85,1,85,3,85,1170,8,85,1,85,1,
        85,1,85,3,85,1175,8,85,1,85,3,85,1178,8,85,1,86,1,86,1,86,3,86,1183,
        8,86,1,87,1,87,1,87,5,87,1188,8,87,10,87,12,87,1191,9,87,1,87,3,
        87,1194,8,87,1,88,1,88,3,88,1198,8,88,1,89,1,89,1,89,1,90,1,90,1,
        90,1,90,1,90,3,90,1208,8,90,1,90,1,90,1,90,1,90,1,90,1,90,3,90,1216,
        8,90,1,90,3,90,1219,8,90,1,90,1,90,3,90,1223,8,90,1,91,1,91,1,91,
        5,91,1228,8,91,10,91,12,91,1231,9,91,1,92,1,92,3,92,1235,8,92,1,
        92,1,92,1,92,1,93,1,93,1,93,1,94,1,94,1,94,1,94,1,94,3,94,1248,8,
        94,1,94,3,94,1251,8,94,1,94,3,94,1254,8,94,3,94,1256,8,94,1,94,1,
        94,1,95,1,95,1,95,5,95,1263,8,95,10,95,12,95,1266,9,95,1,96,1,96,
        1,96,5,96,1271,8,96,10,96,12,96,1274,9,96,1,97,1,97,1,97,1,97,1,
        98,1,98,1,98,3,98,1283,8,98,1,98,1,98,1,98,1,99,1,99,1,99,1,99,1,
        100,1,100,1,100,5,100,1295,8,100,10,100,12,100,1298,9,100,1,100,
        3,100,1301,8,100,1,101,1,101,3,101,1305,8,101,1,101,1,101,1,101,
        1,101,3,101,1311,8,101,1,102,1,102,1,102,1,103,1,103,1,103,5,103,
        1319,8,103,10,103,12,103,1322,9,103,1,103,3,103,1325,8,103,1,104,
        1,104,1,104,1,104,1,104,1,104,3,104,1333,8,104,1,104,3,104,1336,
        8,104,1,105,1,105,1,105,1,105,3,105,1342,8,105,3,105,1344,8,105,
        1,106,1,106,1,106,5,106,1349,8,106,10,106,12,106,1352,9,106,1,106,
        3,106,1355,8,106,1,107,1,107,1,107,3,107,1360,8,107,1,108,1,108,
        1,108,5,108,1365,8,108,10,108,12,108,1368,9,108,1,108,3,108,1371,
        8,108,1,109,1,109,1,109,3,109,1376,8,109,1,110,1,110,1,110,1,110,
        1,111,1,111,3,111,1384,8,111,1,112,1,112,1,112,5,112,1389,8,112,
        10,112,12,112,1392,9,112,1,113,1,113,1,113,5,113,1397,8,113,10,113,
        12,113,1400,9,113,1,114,1,114,1,114,3,114,1405,8,114,1,115,1,115,
        5,115,1409,8,115,10,115,12,115,1412,9,115,1,116,1,116,1,116,1,116,
        1,116,1,116,1,116,1,116,1,116,1,116,3,116,1424,8,116,1,117,1,117,
        1,117,1,118,1,118,1,118,1,119,1,119,1,119,1,120,1,120,1,120,1,121,
        1,121,1,121,1,122,1,122,1,122,1,123,1,123,1,123,1,123,1,124,1,124,
        1,124,1,125,1,125,1,125,1,125,1,126,1,126,1,126,1,127,1,127,1,127,
        1,127,1,127,1,127,5,127,1464,8,127,10,127,12,127,1467,9,127,1,128,
        1,128,1,128,1,128,1,128,1,128,5,128,1475,8,128,10,128,12,128,1478,
        9,128,1,129,1,129,1,129,1,129,1,129,1,129,5,129,1486,8,129,10,129,
        12,129,1489,9,129,1,130,1,130,1,130,1,130,1,130,1,130,5,130,1497,
        8,130,10,130,12,130,1500,9,130,1,131,1,131,1,131,1,131,1,131,1,131,
        5,131,1508,8,131,10,131,12,131,1511,9,131,1,132,1,132,1,132,1,132,
        1,132,1,132,5,132,1519,8,132,10,132,12,132,1522,9,132,1,133,1,133,
        1,133,1,133,1,133,1,133,1,133,3,133,1531,8,133,1,134,1,134,1,134,
        3,134,1536,8,134,1,135,1,135,1,135,3,135,1541,8,135,1,136,1,136,
        1,136,1,136,1,136,1,136,1,136,1,136,1,136,3,136,1552,8,136,1,136,
        1,136,1,136,1,136,1,136,3,136,1559,8,136,5,136,1561,8,136,10,136,
        12,136,1564,9,136,1,137,1,137,1,137,3,137,1569,8,137,1,137,1,137,
        1,137,3,137,1574,8,137,5,137,1576,8,137,10,137,12,137,1579,9,137,
        1,137,3,137,1582,8,137,3,137,1584,8,137,1,138,3,138,1587,8,138,1,
        138,1,138,3,138,1591,8,138,1,138,1,138,3,138,1595,8,138,3,138,1597,
        8,138,1,138,3,138,1600,8,138,1,139,1,139,1,139,1,139,1,139,1,139,
        1,139,1,139,1,139,3,139,1611,8,139,1,139,1,139,3,139,1615,8,139,
        1,139,1,139,1,139,1,139,3,139,1621,8,139,1,139,3,139,1624,8,139,
        1,140,1,140,1,140,3,140,1629,8,140,1,140,1,140,1,141,1,141,3,141,
        1635,8,141,1,141,1,141,1,141,1,142,1,142,1,143,1,143,5,143,1644,
        8,143,10,143,12,143,1647,9,143,1,143,5,143,1650,8,143,10,143,12,
        143,1653,9,143,1,143,3,143,1656,8,143,1,143,1,143,5,143,1660,8,143,
        10,143,12,143,1663,9,143,1,143,3,143,1666,8,143,1,143,4,143,1669,
        8,143,11,143,12,143,1670,1,143,5,143,1674,8,143,10,143,12,143,1677,
        9,143,1,143,3,143,1680,8,143,1,143,4,143,1683,8,143,11,143,12,143,
        1684,1,143,3,143,1688,8,143,1,143,3,143,1691,8,143,1,144,4,144,1694,
        8,144,11,144,12,144,1695,1,144,1,144,3,144,1700,8,144,1,145,5,145,
        1703,8,145,10,145,12,145,1706,9,145,1,145,4,145,1709,8,145,11,145,
        12,145,1710,1,145,1,145,3,145,1715,8,145,1,146,1,146,1,146,5,146,
        1720,8,146,10,146,12,146,1723,9,146,1,146,3,146,1726,8,146,1,146,
        1,146,1,146,4,146,1731,8,146,11,146,12,146,1732,1,146,3,146,1736,
        8,146,1,146,3,146,1739,8,146,1,147,1,147,1,147,1,148,1,148,3,148,
        1746,8,148,1,149,1,149,1,149,3,149,1751,8,149,1,150,1,150,3,150,
        1755,8,150,1,150,3,150,1758,8,150,1,151,1,151,1,152,1,152,3,152,
        1764,8,152,1,153,1,153,1,153,3,153,1769,8,153,1,153,3,153,1772,8,
        153,1,153,3,153,1775,8,153,1,153,3,153,1778,8,153,1,153,1,153,1,
        154,1,154,1,154,1,155,1,155,5,155,1787,8,155,10,155,12,155,1790,
        9,155,1,156,1,156,3,156,1794,8,156,1,157,1,157,5,157,1798,8,157,
        10,157,12,157,1801,9,157,1,157,1,157,1,158,1,158,1,159,1,159,4,159,
        1809,8,159,11,159,12,159,1810,1,160,1,160,3,160,1815,8,160,1,160,
        1,160,1,161,1,161,1,161,1,161,3,161,1823,8,161,3,161,1825,8,161,
        1,161,1,161,1,162,1,162,1,162,1,162,1,163,1,163,3,163,1835,8,163,
        1,163,1,163,1,164,1,164,1,164,5,164,1842,8,164,10,164,12,164,1845,
        9,164,1,164,3,164,1848,8,164,1,165,1,165,1,165,3,165,1853,8,165,
        1,166,1,166,1,166,1,166,1,167,4,167,1860,8,167,11,167,12,167,1861,
        1,168,3,168,1865,8,168,1,168,1,168,1,168,1,168,1,168,1,168,5,168,
        1873,8,168,10,168,12,168,1876,9,168,1,169,1,169,1,169,1,169,1,169,
        1,170,1,170,1,170,1,170,1,170,1,171,1,171,1,171,3,171,1891,8,171,
        1,171,1,171,1,171,1,172,1,172,1,172,1,172,1,172,1,173,1,173,3,173,
        1903,8,173,1,174,1,174,1,174,5,174,1908,8,174,10,174,12,174,1911,
        9,174,1,174,1,174,3,174,1915,8,174,1,174,3,174,1918,8,174,1,175,
        1,175,1,175,3,175,1923,8,175,1,176,1,176,1,176,5,176,1928,8,176,
        10,176,12,176,1931,9,176,1,176,1,176,1,176,1,176,5,176,1937,8,176,
        10,176,12,176,1940,9,176,3,176,1942,8,176,1,176,1,176,1,176,5,176,
        1947,8,176,10,176,12,176,1950,9,176,3,176,1952,8,176,1,177,1,177,
        1,177,1,178,1,178,1,178,1,178,3,178,1961,8,178,1,179,1,179,1,179,
        1,179,1,179,3,179,1968,8,179,1,180,1,180,1,180,5,180,1973,8,180,
        10,180,12,180,1976,9,180,1,180,3,180,1979,8,180,1,181,1,181,1,181,
        4,181,1984,8,181,11,181,12,181,1985,1,181,3,181,1989,8,181,1,182,
        1,182,1,182,1,182,4,182,1995,8,182,11,182,12,182,1996,1,182,3,182,
        2000,8,182,3,182,2002,8,182,1,183,1,183,1,183,3,183,2007,8,183,1,
        184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,2016,8,184,1,184,3,
        184,2019,8,184,1,185,1,185,1,185,1,185,1,185,1,185,1,185,3,185,2028,
        8,185,1,185,1,185,1,185,3,185,2033,8,185,1,185,3,185,2036,8,185,
        1,186,1,186,1,186,1,186,1,186,1,186,3,186,2044,8,186,1,187,1,187,
        1,187,1,187,1,187,1,187,1,187,3,187,2053,8,187,1,188,1,188,1,188,
        1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,1,188,3,188,
        2068,8,188,1,188,3,188,2071,8,188,5,188,2073,8,188,10,188,12,188,
        2076,9,188,1,189,1,189,1,189,5,189,2081,8,189,10,189,12,189,2084,
        9,189,1,189,3,189,2087,8,189,1,190,1,190,1,190,1,190,1,190,1,190,
        1,190,3,190,2096,8,190,1,190,3,190,2099,8,190,1,191,1,191,1,191,
        1,191,1,191,1,191,1,191,3,191,2108,8,191,1,191,1,191,1,191,3,191,
        2113,8,191,1,191,3,191,2116,8,191,1,192,1,192,1,192,5,192,2121,8,
        192,10,192,12,192,2124,9,192,1,192,1,192,1,192,1,192,1,192,1,192,
        3,192,2132,8,192,1,192,1,192,3,192,2136,8,192,3,192,2138,8,192,1,
        192,1,192,1,192,1,192,1,192,3,192,2145,8,192,1,192,1,192,3,192,2149,
        8,192,1,193,1,193,1,193,3,193,2154,8,193,1,194,1,194,1,194,1,195,
        1,195,1,195,1,196,1,196,1,196,1,197,1,197,1,197,1,198,1,198,1,198,
        1,198,0,9,58,254,256,258,260,262,264,272,376,199,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,
        198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,
        230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
        262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,
        294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,
        326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,
        358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,
        390,392,394,396,0,5,3,0,71,81,83,83,85,85,2,0,48,48,87,87,1,0,52,
        53,1,0,68,69,4,0,54,55,61,61,82,82,84,84,2337,0,399,1,0,0,0,2,403,
        1,0,0,0,4,405,1,0,0,0,6,414,1,0,0,0,8,429,1,0,0,0,10,432,1,0,0,0,
        12,438,1,0,0,0,14,446,1,0,0,0,16,448,1,0,0,0,18,475,1,0,0,0,20,485,
        1,0,0,0,22,527,1,0,0,0,24,531,1,0,0,0,26,533,1,0,0,0,28,535,1,0,
        0,0,30,539,1,0,0,0,32,547,1,0,0,0,34,556,1,0,0,0,36,565,1,0,0,0,
        38,568,1,0,0,0,40,570,1,0,0,0,42,578,1,0,0,0,44,580,1,0,0,0,46,602,
        1,0,0,0,48,613,1,0,0,0,50,615,1,0,0,0,52,623,1,0,0,0,54,628,1,0,
        0,0,56,636,1,0,0,0,58,641,1,0,0,0,60,658,1,0,0,0,62,664,1,0,0,0,
        64,672,1,0,0,0,66,674,1,0,0,0,68,693,1,0,0,0,70,734,1,0,0,0,72,736,
        1,0,0,0,74,787,1,0,0,0,76,790,1,0,0,0,78,801,1,0,0,0,80,846,1,0,
        0,0,82,848,1,0,0,0,84,851,1,0,0,0,86,858,1,0,0,0,88,865,1,0,0,0,
        90,873,1,0,0,0,92,883,1,0,0,0,94,887,1,0,0,0,96,890,1,0,0,0,98,893,
        1,0,0,0,100,896,1,0,0,0,102,899,1,0,0,0,104,909,1,0,0,0,106,919,
        1,0,0,0,108,923,1,0,0,0,110,931,1,0,0,0,112,946,1,0,0,0,114,980,
        1,0,0,0,116,1018,1,0,0,0,118,1020,1,0,0,0,120,1031,1,0,0,0,122,1041,
        1,0,0,0,124,1045,1,0,0,0,126,1063,1,0,0,0,128,1065,1,0,0,0,130,1073,
        1,0,0,0,132,1078,1,0,0,0,134,1082,1,0,0,0,136,1084,1,0,0,0,138,1088,
        1,0,0,0,140,1104,1,0,0,0,142,1112,1,0,0,0,144,1120,1,0,0,0,146,1122,
        1,0,0,0,148,1127,1,0,0,0,150,1132,1,0,0,0,152,1136,1,0,0,0,154,1138,
        1,0,0,0,156,1140,1,0,0,0,158,1142,1,0,0,0,160,1144,1,0,0,0,162,1146,
        1,0,0,0,164,1148,1,0,0,0,166,1155,1,0,0,0,168,1163,1,0,0,0,170,1177,
        1,0,0,0,172,1179,1,0,0,0,174,1184,1,0,0,0,176,1197,1,0,0,0,178,1199,
        1,0,0,0,180,1222,1,0,0,0,182,1224,1,0,0,0,184,1234,1,0,0,0,186,1239,
        1,0,0,0,188,1242,1,0,0,0,190,1259,1,0,0,0,192,1267,1,0,0,0,194,1275,
        1,0,0,0,196,1279,1,0,0,0,198,1287,1,0,0,0,200,1291,1,0,0,0,202,1310,
        1,0,0,0,204,1312,1,0,0,0,206,1315,1,0,0,0,208,1335,1,0,0,0,210,1337,
        1,0,0,0,212,1345,1,0,0,0,214,1359,1,0,0,0,216,1361,1,0,0,0,218,1375,
        1,0,0,0,220,1377,1,0,0,0,222,1383,1,0,0,0,224,1385,1,0,0,0,226,1393,
        1,0,0,0,228,1404,1,0,0,0,230,1406,1,0,0,0,232,1423,1,0,0,0,234,1425,
        1,0,0,0,236,1428,1,0,0,0,238,1431,1,0,0,0,240,1434,1,0,0,0,242,1437,
        1,0,0,0,244,1440,1,0,0,0,246,1443,1,0,0,0,248,1447,1,0,0,0,250,1450,
        1,0,0,0,252,1454,1,0,0,0,254,1457,1,0,0,0,256,1468,1,0,0,0,258,1479,
        1,0,0,0,260,1490,1,0,0,0,262,1501,1,0,0,0,264,1512,1,0,0,0,266,1530,
        1,0,0,0,268,1532,1,0,0,0,270,1540,1,0,0,0,272,1542,1,0,0,0,274,1583,
        1,0,0,0,276,1599,1,0,0,0,278,1623,1,0,0,0,280,1625,1,0,0,0,282,1632,
        1,0,0,0,284,1639,1,0,0,0,286,1690,1,0,0,0,288,1693,1,0,0,0,290,1704,
        1,0,0,0,292,1738,1,0,0,0,294,1740,1,0,0,0,296,1743,1,0,0,0,298,1747,
        1,0,0,0,300,1752,1,0,0,0,302,1759,1,0,0,0,304,1763,1,0,0,0,306,1765,
        1,0,0,0,308,1781,1,0,0,0,310,1784,1,0,0,0,312,1793,1,0,0,0,314,1795,
        1,0,0,0,316,1804,1,0,0,0,318,1808,1,0,0,0,320,1812,1,0,0,0,322,1818,
        1,0,0,0,324,1828,1,0,0,0,326,1832,1,0,0,0,328,1838,1,0,0,0,330,1852,
        1,0,0,0,332,1854,1,0,0,0,334,1859,1,0,0,0,336,1864,1,0,0,0,338,1877,
        1,0,0,0,340,1882,1,0,0,0,342,1887,1,0,0,0,344,1895,1,0,0,0,346,1900,
        1,0,0,0,348,1917,1,0,0,0,350,1922,1,0,0,0,352,1951,1,0,0,0,354,1953,
        1,0,0,0,356,1960,1,0,0,0,358,1967,1,0,0,0,360,1969,1,0,0,0,362,1980,
        1,0,0,0,364,1990,1,0,0,0,366,2006,1,0,0,0,368,2018,1,0,0,0,370,2035,
        1,0,0,0,372,2043,1,0,0,0,374,2045,1,0,0,0,376,2054,1,0,0,0,378,2077,
        1,0,0,0,380,2098,1,0,0,0,382,2115,1,0,0,0,384,2148,1,0,0,0,386,2153,
        1,0,0,0,388,2155,1,0,0,0,390,2158,1,0,0,0,392,2161,1,0,0,0,394,2164,
        1,0,0,0,396,2167,1,0,0,0,398,400,3,10,5,0,399,398,1,0,0,0,399,400,
        1,0,0,0,400,401,1,0,0,0,401,402,5,0,0,1,402,1,1,0,0,0,403,404,3,
        14,7,0,404,3,1,0,0,0,405,409,3,206,103,0,406,408,5,93,0,0,407,406,
        1,0,0,0,408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,412,
        1,0,0,0,411,409,1,0,0,0,412,413,5,0,0,1,413,5,1,0,0,0,414,416,5,
        42,0,0,415,417,3,384,192,0,416,415,1,0,0,0,416,417,1,0,0,0,417,418,
        1,0,0,0,418,419,5,45,0,0,419,420,5,86,0,0,420,424,3,208,104,0,421,
        423,5,93,0,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,
        425,1,0,0,0,425,427,1,0,0,0,426,424,1,0,0,0,427,428,5,0,0,1,428,
        7,1,0,0,0,429,430,3,212,106,0,430,9,1,0,0,0,431,433,3,12,6,0,432,
        431,1,0,0,0,433,434,1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,
        11,1,0,0,0,436,439,3,20,10,0,437,439,3,16,8,0,438,436,1,0,0,0,438,
        437,1,0,0,0,439,13,1,0,0,0,440,441,3,20,10,0,441,442,5,93,0,0,442,
        447,1,0,0,0,443,447,3,16,8,0,444,447,5,93,0,0,445,447,5,0,0,1,446,
        440,1,0,0,0,446,443,1,0,0,0,446,444,1,0,0,0,446,445,1,0,0,0,447,
        15,1,0,0,0,448,453,3,18,9,0,449,450,5,51,0,0,450,452,3,18,9,0,451,
        449,1,0,0,0,452,455,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,
        457,1,0,0,0,455,453,1,0,0,0,456,458,5,51,0,0,457,456,1,0,0,0,457,
        458,1,0,0,0,458,459,1,0,0,0,459,460,5,93,0,0,460,17,1,0,0,0,461,
        476,3,22,11,0,462,476,3,196,98,0,463,476,3,212,106,0,464,476,3,28,
        14,0,465,476,3,42,21,0,466,476,3,30,15,0,467,476,5,11,0,0,468,476,
        3,36,18,0,469,476,3,38,19,0,470,476,3,40,20,0,471,476,5,13,0,0,472,
        476,5,23,0,0,473,476,3,32,16,0,474,476,3,34,17,0,475,461,1,0,0,0,
        475,462,1,0,0,0,475,463,1,0,0,0,475,464,1,0,0,0,475,465,1,0,0,0,
        475,466,1,0,0,0,475,467,1,0,0,0,475,468,1,0,0,0,475,469,1,0,0,0,
        475,470,1,0,0,0,475,471,1,0,0,0,475,472,1,0,0,0,475,473,1,0,0,0,
        475,474,1,0,0,0,476,19,1,0,0,0,477,486,3,68,34,0,478,486,3,102,51,
        0,479,486,3,64,32,0,480,486,3,112,56,0,481,486,3,110,55,0,482,486,
        3,116,58,0,483,486,3,108,54,0,484,486,3,124,62,0,485,477,1,0,0,0,
        485,478,1,0,0,0,485,479,1,0,0,0,485,480,1,0,0,0,485,481,1,0,0,0,
        485,482,1,0,0,0,485,483,1,0,0,0,485,484,1,0,0,0,486,21,1,0,0,0,487,
        488,5,90,0,0,488,489,5,49,0,0,489,492,3,208,104,0,490,491,5,60,0,
        0,491,493,3,24,12,0,492,490,1,0,0,0,492,493,1,0,0,0,493,528,1,0,
        0,0,494,495,5,42,0,0,495,496,3,372,186,0,496,497,5,45,0,0,497,500,
        1,0,0,0,498,500,3,374,187,0,499,494,1,0,0,0,499,498,1,0,0,0,500,
        501,1,0,0,0,501,502,5,49,0,0,502,505,3,208,104,0,503,504,5,60,0,
        0,504,506,3,24,12,0,505,503,1,0,0,0,505,506,1,0,0,0,506,528,1,0,
        0,0,507,508,3,360,180,0,508,509,5,60,0,0,509,511,1,0,0,0,510,507,
        1,0,0,0,511,512,1,0,0,0,512,510,1,0,0,0,512,513,1,0,0,0,513,516,
        1,0,0,0,514,517,3,210,105,0,515,517,3,212,106,0,516,514,1,0,0,0,
        516,515,1,0,0,0,517,519,1,0,0,0,518,520,5,3,0,0,519,518,1,0,0,0,
        519,520,1,0,0,0,520,528,1,0,0,0,521,522,3,372,186,0,522,525,3,26,
        13,0,523,526,3,210,105,0,524,526,3,212,106,0,525,523,1,0,0,0,525,
        524,1,0,0,0,526,528,1,0,0,0,527,487,1,0,0,0,527,499,1,0,0,0,527,
        510,1,0,0,0,527,521,1,0,0,0,528,23,1,0,0,0,529,532,3,210,105,0,530,
        532,3,212,106,0,531,529,1,0,0,0,531,530,1,0,0,0,532,25,1,0,0,0,533,
        534,7,0,0,0,534,27,1,0,0,0,535,537,5,21,0,0,536,538,3,212,106,0,
        537,536,1,0,0,0,537,538,1,0,0,0,538,29,1,0,0,0,539,545,5,16,0,0,
        540,543,3,208,104,0,541,542,5,29,0,0,542,544,3,208,104,0,543,541,
        1,0,0,0,543,544,1,0,0,0,544,546,1,0,0,0,545,540,1,0,0,0,545,546,
        1,0,0,0,546,31,1,0,0,0,547,548,5,34,0,0,548,553,5,90,0,0,549,550,
        5,50,0,0,550,552,5,90,0,0,551,549,1,0,0,0,552,555,1,0,0,0,553,551,
        1,0,0,0,553,554,1,0,0,0,554,33,1,0,0,0,555,553,1,0,0,0,556,557,5,
        30,0,0,557,562,5,90,0,0,558,559,5,50,0,0,559,561,5,90,0,0,560,558,
        1,0,0,0,561,564,1,0,0,0,562,560,1,0,0,0,562,563,1,0,0,0,563,35,1,
        0,0,0,564,562,1,0,0,0,565,566,5,33,0,0,566,567,3,378,189,0,567,37,
        1,0,0,0,568,569,3,210,105,0,569,39,1,0,0,0,570,571,5,32,0,0,571,
        574,3,208,104,0,572,573,5,50,0,0,573,575,3,208,104,0,574,572,1,0,
        0,0,574,575,1,0,0,0,575,41,1,0,0,0,576,579,3,44,22,0,577,579,3,46,
        23,0,578,576,1,0,0,0,578,577,1,0,0,0,579,43,1,0,0,0,580,581,5,10,
        0,0,581,582,3,54,27,0,582,45,1,0,0,0,583,587,5,29,0,0,584,586,7,
        1,0,0,585,584,1,0,0,0,586,589,1,0,0,0,587,585,1,0,0,0,587,588,1,
        0,0,0,588,590,1,0,0,0,589,587,1,0,0,0,590,591,3,58,29,0,591,592,
        5,10,0,0,592,593,3,48,24,0,593,603,1,0,0,0,594,596,5,29,0,0,595,
        597,7,1,0,0,596,595,1,0,0,0,597,598,1,0,0,0,598,596,1,0,0,0,598,
        599,1,0,0,0,599,600,1,0,0,0,600,601,5,10,0,0,601,603,3,48,24,0,602,
        583,1,0,0,0,602,594,1,0,0,0,603,47,1,0,0,0,604,605,5,42,0,0,605,
        607,3,50,25,0,606,608,5,50,0,0,607,606,1,0,0,0,607,608,1,0,0,0,608,
        609,1,0,0,0,609,610,5,45,0,0,610,614,1,0,0,0,611,614,3,50,25,0,612,
        614,5,54,0,0,613,604,1,0,0,0,613,611,1,0,0,0,613,612,1,0,0,0,614,
        49,1,0,0,0,615,620,3,52,26,0,616,617,5,50,0,0,617,619,3,52,26,0,
        618,616,1,0,0,0,619,622,1,0,0,0,620,618,1,0,0,0,620,621,1,0,0,0,
        621,51,1,0,0,0,622,620,1,0,0,0,623,626,5,90,0,0,624,625,5,27,0,0,
        625,627,5,90,0,0,626,624,1,0,0,0,626,627,1,0,0,0,627,53,1,0,0,0,
        628,633,3,56,28,0,629,630,5,50,0,0,630,632,3,56,28,0,631,629,1,0,
        0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,55,1,0,0,
        0,635,633,1,0,0,0,636,639,3,58,29,0,637,638,5,27,0,0,638,640,5,90,
        0,0,639,637,1,0,0,0,639,640,1,0,0,0,640,57,1,0,0,0,641,642,6,29,
        -1,0,642,643,5,90,0,0,643,649,1,0,0,0,644,645,10,2,0,0,645,646,5,
        48,0,0,646,648,5,90,0,0,647,644,1,0,0,0,648,651,1,0,0,0,649,647,
        1,0,0,0,649,650,1,0,0,0,650,59,1,0,0,0,651,649,1,0,0,0,652,653,5,
        93,0,0,653,654,5,1,0,0,654,655,3,10,5,0,655,656,5,2,0,0,656,659,
        1,0,0,0,657,659,3,16,8,0,658,652,1,0,0,0,658,657,1,0,0,0,659,61,
        1,0,0,0,660,661,5,84,0,0,661,662,3,222,111,0,662,663,5,93,0,0,663,
        665,1,0,0,0,664,660,1,0,0,0,665,666,1,0,0,0,666,664,1,0,0,0,666,
        667,1,0,0,0,667,63,1,0,0,0,668,669,3,62,31,0,669,670,3,66,33,0,670,
        673,1,0,0,0,671,673,3,66,33,0,672,668,1,0,0,0,672,671,1,0,0,0,673,
        65,1,0,0,0,674,675,5,18,0,0,675,677,5,90,0,0,676,678,3,198,99,0,
        677,676,1,0,0,0,677,678,1,0,0,0,678,684,1,0,0,0,679,681,5,42,0,0,
        680,682,3,346,173,0,681,680,1,0,0,0,681,682,1,0,0,0,682,683,1,0,
        0,0,683,685,5,45,0,0,684,679,1,0,0,0,684,685,1,0,0,0,685,686,1,0,
        0,0,686,687,5,49,0,0,687,688,3,60,30,0,688,67,1,0,0,0,689,690,3,
        62,31,0,690,691,3,70,35,0,691,694,1,0,0,0,692,694,3,70,35,0,693,
        689,1,0,0,0,693,692,1,0,0,0,694,69,1,0,0,0,695,696,5,28,0,0,696,
        698,5,90,0,0,697,699,3,198,99,0,698,697,1,0,0,0,698,699,1,0,0,0,
        699,700,1,0,0,0,700,702,5,42,0,0,701,703,3,72,36,0,702,701,1,0,0,
        0,702,703,1,0,0,0,703,704,1,0,0,0,704,707,5,45,0,0,705,706,5,86,
        0,0,706,708,3,208,104,0,707,705,1,0,0,0,707,708,1,0,0,0,708,709,
        1,0,0,0,709,711,5,49,0,0,710,712,3,386,193,0,711,710,1,0,0,0,711,
        712,1,0,0,0,712,713,1,0,0,0,713,735,3,60,30,0,714,715,5,37,0,0,715,
        716,5,28,0,0,716,718,5,90,0,0,717,719,3,198,99,0,718,717,1,0,0,0,
        718,719,1,0,0,0,719,720,1,0,0,0,720,722,5,42,0,0,721,723,3,72,36,
        0,722,721,1,0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,727,5,45,0,
        0,725,726,5,86,0,0,726,728,3,208,104,0,727,725,1,0,0,0,727,728,1,
        0,0,0,728,729,1,0,0,0,729,731,5,49,0,0,730,732,3,386,193,0,731,730,
        1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,735,3,60,30,0,734,695,
        1,0,0,0,734,714,1,0,0,0,735,71,1,0,0,0,736,737,3,74,37,0,737,73,
        1,0,0,0,738,742,3,76,38,0,739,741,3,84,42,0,740,739,1,0,0,0,741,
        744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,748,1,0,0,0,744,
        742,1,0,0,0,745,747,3,88,44,0,746,745,1,0,0,0,747,750,1,0,0,0,748,
        746,1,0,0,0,748,749,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,751,
        753,3,80,40,0,752,751,1,0,0,0,752,753,1,0,0,0,753,788,1,0,0,0,754,
        758,3,78,39,0,755,757,3,88,44,0,756,755,1,0,0,0,757,760,1,0,0,0,
        758,756,1,0,0,0,758,759,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,
        761,763,3,80,40,0,762,761,1,0,0,0,762,763,1,0,0,0,763,788,1,0,0,
        0,764,766,3,84,42,0,765,764,1,0,0,0,766,767,1,0,0,0,767,765,1,0,
        0,0,767,768,1,0,0,0,768,772,1,0,0,0,769,771,3,88,44,0,770,769,1,
        0,0,0,771,774,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,776,1,
        0,0,0,774,772,1,0,0,0,775,777,3,80,40,0,776,775,1,0,0,0,776,777,
        1,0,0,0,777,788,1,0,0,0,778,780,3,88,44,0,779,778,1,0,0,0,780,781,
        1,0,0,0,781,779,1,0,0,0,781,782,1,0,0,0,782,784,1,0,0,0,783,785,
        3,80,40,0,784,783,1,0,0,0,784,785,1,0,0,0,785,788,1,0,0,0,786,788,
        3,80,40,0,787,738,1,0,0,0,787,754,1,0,0,0,787,765,1,0,0,0,787,779,
        1,0,0,0,787,786,1,0,0,0,788,75,1,0,0,0,789,791,3,84,42,0,790,789,
        1,0,0,0,791,792,1,0,0,0,792,790,1,0,0,0,792,793,1,0,0,0,793,794,
        1,0,0,0,794,796,5,55,0,0,795,797,5,50,0,0,796,795,1,0,0,0,796,797,
        1,0,0,0,797,77,1,0,0,0,798,800,3,84,42,0,799,798,1,0,0,0,800,803,
        1,0,0,0,801,799,1,0,0,0,801,802,1,0,0,0,802,805,1,0,0,0,803,801,
        1,0,0,0,804,806,3,88,44,0,805,804,1,0,0,0,806,807,1,0,0,0,807,805,
        1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,811,5,55,0,0,810,812,
        5,50,0,0,811,810,1,0,0,0,811,812,1,0,0,0,812,79,1,0,0,0,813,814,
        5,54,0,0,814,818,3,84,42,0,815,817,3,90,45,0,816,815,1,0,0,0,817,
        820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,822,1,0,0,0,820,
        818,1,0,0,0,821,823,3,82,41,0,822,821,1,0,0,0,822,823,1,0,0,0,823,
        847,1,0,0,0,824,825,5,54,0,0,825,829,3,86,43,0,826,828,3,90,45,0,
        827,826,1,0,0,0,828,831,1,0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,
        830,833,1,0,0,0,831,829,1,0,0,0,832,834,3,82,41,0,833,832,1,0,0,
        0,833,834,1,0,0,0,834,847,1,0,0,0,835,836,5,54,0,0,836,838,5,50,
        0,0,837,839,3,90,45,0,838,837,1,0,0,0,839,840,1,0,0,0,840,838,1,
        0,0,0,840,841,1,0,0,0,841,843,1,0,0,0,842,844,3,82,41,0,843,842,
        1,0,0,0,843,844,1,0,0,0,844,847,1,0,0,0,845,847,3,82,41,0,846,813,
        1,0,0,0,846,824,1,0,0,0,846,835,1,0,0,0,846,845,1,0,0,0,847,81,1,
        0,0,0,848,849,5,70,0,0,849,850,3,84,42,0,850,83,1,0,0,0,851,853,
        3,92,46,0,852,854,5,50,0,0,853,852,1,0,0,0,853,854,1,0,0,0,854,856,
        1,0,0,0,855,857,5,3,0,0,856,855,1,0,0,0,856,857,1,0,0,0,857,85,1,
        0,0,0,858,860,3,94,47,0,859,861,5,50,0,0,860,859,1,0,0,0,860,861,
        1,0,0,0,861,863,1,0,0,0,862,864,5,3,0,0,863,862,1,0,0,0,863,864,
        1,0,0,0,864,87,1,0,0,0,865,866,3,92,46,0,866,868,3,100,50,0,867,
        869,5,50,0,0,868,867,1,0,0,0,868,869,1,0,0,0,869,871,1,0,0,0,870,
        872,5,3,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,89,1,0,0,0,873,875,
        3,92,46,0,874,876,3,100,50,0,875,874,1,0,0,0,875,876,1,0,0,0,876,
        878,1,0,0,0,877,879,5,50,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,
        881,1,0,0,0,880,882,5,3,0,0,881,880,1,0,0,0,881,882,1,0,0,0,882,
        91,1,0,0,0,883,885,5,90,0,0,884,886,3,96,48,0,885,884,1,0,0,0,885,
        886,1,0,0,0,886,93,1,0,0,0,887,888,5,90,0,0,888,889,3,98,49,0,889,
        95,1,0,0,0,890,891,5,49,0,0,891,892,3,208,104,0,892,97,1,0,0,0,893,
        894,5,49,0,0,894,895,3,214,107,0,895,99,1,0,0,0,896,897,5,60,0,0,
        897,898,3,208,104,0,898,101,1,0,0,0,899,900,5,39,0,0,900,901,3,222,
        111,0,901,902,5,49,0,0,902,907,3,60,30,0,903,908,3,104,52,0,904,
        906,3,106,53,0,905,904,1,0,0,0,905,906,1,0,0,0,906,908,1,0,0,0,907,
        903,1,0,0,0,907,905,1,0,0,0,908,103,1,0,0,0,909,910,5,38,0,0,910,
        911,3,222,111,0,911,912,5,49,0,0,912,917,3,60,30,0,913,918,3,104,
        52,0,914,916,3,106,53,0,915,914,1,0,0,0,915,916,1,0,0,0,916,918,
        1,0,0,0,917,913,1,0,0,0,917,915,1,0,0,0,918,105,1,0,0,0,919,920,
        5,9,0,0,920,921,5,49,0,0,921,922,3,60,30,0,922,107,1,0,0,0,923,924,
        5,31,0,0,924,925,3,222,111,0,925,926,5,49,0,0,926,928,3,60,30,0,
        927,929,3,106,53,0,928,927,1,0,0,0,928,929,1,0,0,0,929,109,1,0,0,
        0,930,932,5,37,0,0,931,930,1,0,0,0,931,932,1,0,0,0,932,933,1,0,0,
        0,933,934,5,24,0,0,934,935,3,360,180,0,935,936,5,15,0,0,936,937,
        3,212,106,0,937,939,5,49,0,0,938,940,5,3,0,0,939,938,1,0,0,0,939,
        940,1,0,0,0,940,941,1,0,0,0,941,943,3,60,30,0,942,944,3,106,53,0,
        943,942,1,0,0,0,943,944,1,0,0,0,944,111,1,0,0,0,945,947,5,37,0,0,
        946,945,1,0,0,0,946,947,1,0,0,0,947,948,1,0,0,0,948,976,5,36,0,0,
        949,950,5,42,0,0,950,955,3,114,57,0,951,952,5,50,0,0,952,954,3,114,
        57,0,953,951,1,0,0,0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,1,0,
        0,0,956,959,1,0,0,0,957,955,1,0,0,0,958,960,5,50,0,0,959,958,1,0,
        0,0,959,960,1,0,0,0,960,961,1,0,0,0,961,962,5,45,0,0,962,963,5,49,
        0,0,963,977,1,0,0,0,964,969,3,114,57,0,965,966,5,50,0,0,966,968,
        3,114,57,0,967,965,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,970,
        1,0,0,0,970,972,1,0,0,0,971,969,1,0,0,0,972,974,5,49,0,0,973,975,
        5,3,0,0,974,973,1,0,0,0,974,975,1,0,0,0,975,977,1,0,0,0,976,949,
        1,0,0,0,976,964,1,0,0,0,977,978,1,0,0,0,978,979,3,60,30,0,979,113,
        1,0,0,0,980,983,3,208,104,0,981,982,5,27,0,0,982,984,3,366,183,0,
        983,981,1,0,0,0,983,984,1,0,0,0,984,115,1,0,0,0,985,986,5,26,0,0,
        986,987,5,49,0,0,987,988,3,60,30,0,988,989,3,122,61,0,989,1019,1,
        0,0,0,990,991,5,26,0,0,991,992,5,49,0,0,992,994,3,60,30,0,993,995,
        3,118,59,0,994,993,1,0,0,0,995,996,1,0,0,0,996,994,1,0,0,0,996,997,
        1,0,0,0,997,999,1,0,0,0,998,1000,3,106,53,0,999,998,1,0,0,0,999,
        1000,1,0,0,0,1000,1002,1,0,0,0,1001,1003,3,122,61,0,1002,1001,1,
        0,0,0,1002,1003,1,0,0,0,1003,1019,1,0,0,0,1004,1005,5,26,0,0,1005,
        1006,5,49,0,0,1006,1008,3,60,30,0,1007,1009,3,120,60,0,1008,1007,
        1,0,0,0,1009,1010,1,0,0,0,1010,1008,1,0,0,0,1010,1011,1,0,0,0,1011,
        1013,1,0,0,0,1012,1014,3,106,53,0,1013,1012,1,0,0,0,1013,1014,1,
        0,0,0,1014,1016,1,0,0,0,1015,1017,3,122,61,0,1016,1015,1,0,0,0,1016,
        1017,1,0,0,0,1017,1019,1,0,0,0,1018,985,1,0,0,0,1018,990,1,0,0,0,
        1018,1004,1,0,0,0,1019,117,1,0,0,0,1020,1026,5,14,0,0,1021,1024,
        3,208,104,0,1022,1023,5,27,0,0,1023,1025,5,90,0,0,1024,1022,1,0,
        0,0,1024,1025,1,0,0,0,1025,1027,1,0,0,0,1026,1021,1,0,0,0,1026,1027,
        1,0,0,0,1027,1028,1,0,0,0,1028,1029,5,49,0,0,1029,1030,3,60,30,0,
        1030,119,1,0,0,0,1031,1032,5,14,0,0,1032,1033,5,54,0,0,1033,1036,
        3,208,104,0,1034,1035,5,27,0,0,1035,1037,5,90,0,0,1036,1034,1,0,
        0,0,1036,1037,1,0,0,0,1037,1038,1,0,0,0,1038,1039,5,49,0,0,1039,
        1040,3,60,30,0,1040,121,1,0,0,0,1041,1042,5,19,0,0,1042,1043,5,49,
        0,0,1043,1044,3,60,30,0,1044,123,1,0,0,0,1045,1046,3,390,195,0,1046,
        1047,3,126,63,0,1047,1048,5,49,0,0,1048,1049,5,93,0,0,1049,1051,
        5,1,0,0,1050,1052,3,128,64,0,1051,1050,1,0,0,0,1052,1053,1,0,0,0,
        1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,1055,1056,
        5,2,0,0,1056,125,1,0,0,0,1057,1058,3,218,109,0,1058,1060,5,50,0,
        0,1059,1061,3,216,108,0,1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,
        1064,1,0,0,0,1062,1064,3,222,111,0,1063,1057,1,0,0,0,1063,1062,1,
        0,0,0,1064,127,1,0,0,0,1065,1066,3,392,196,0,1066,1068,3,132,66,
        0,1067,1069,3,130,65,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,
        1070,1,0,0,0,1070,1071,5,49,0,0,1071,1072,3,60,30,0,1072,129,1,0,
        0,0,1073,1074,5,39,0,0,1074,1075,3,222,111,0,1075,131,1,0,0,0,1076,
        1079,3,172,86,0,1077,1079,3,134,67,0,1078,1076,1,0,0,0,1078,1077,
        1,0,0,0,1079,133,1,0,0,0,1080,1083,3,136,68,0,1081,1083,3,138,69,
        0,1082,1080,1,0,0,0,1082,1081,1,0,0,0,1083,135,1,0,0,0,1084,1085,
        3,138,69,0,1085,1086,5,27,0,0,1086,1087,3,158,79,0,1087,137,1,0,
        0,0,1088,1093,3,140,70,0,1089,1090,5,56,0,0,1090,1092,3,140,70,0,
        1091,1089,1,0,0,0,1092,1095,1,0,0,0,1093,1091,1,0,0,0,1093,1094,
        1,0,0,0,1094,139,1,0,0,0,1095,1093,1,0,0,0,1096,1105,3,142,71,0,
        1097,1105,3,156,78,0,1098,1105,3,160,80,0,1099,1105,3,162,81,0,1100,
        1105,3,168,84,0,1101,1105,3,170,85,0,1102,1105,3,180,90,0,1103,1105,
        3,188,94,0,1104,1096,1,0,0,0,1104,1097,1,0,0,0,1104,1098,1,0,0,0,
        1104,1099,1,0,0,0,1104,1100,1,0,0,0,1104,1101,1,0,0,0,1104,1102,
        1,0,0,0,1104,1103,1,0,0,0,1105,141,1,0,0,0,1106,1113,3,148,74,0,
        1107,1113,3,146,73,0,1108,1113,3,318,159,0,1109,1113,5,12,0,0,1110,
        1113,5,17,0,0,1111,1113,5,7,0,0,1112,1106,1,0,0,0,1112,1107,1,0,
        0,0,1112,1108,1,0,0,0,1112,1109,1,0,0,0,1112,1110,1,0,0,0,1112,1111,
        1,0,0,0,1113,143,1,0,0,0,1114,1121,3,148,74,0,1115,1121,3,146,73,
        0,1116,1121,3,318,159,0,1117,1121,5,12,0,0,1118,1121,5,17,0,0,1119,
        1121,5,7,0,0,1120,1114,1,0,0,0,1120,1115,1,0,0,0,1120,1116,1,0,0,
        0,1120,1117,1,0,0,0,1120,1118,1,0,0,0,1120,1119,1,0,0,0,1121,145,
        1,0,0,0,1122,1123,3,150,75,0,1123,1124,7,2,0,0,1124,1125,3,154,77,
        0,1125,147,1,0,0,0,1126,1128,5,53,0,0,1127,1126,1,0,0,0,1127,1128,
        1,0,0,0,1128,1129,1,0,0,0,1129,1130,5,91,0,0,1130,149,1,0,0,0,1131,
        1133,5,53,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,
        0,0,1134,1135,3,152,76,0,1135,151,1,0,0,0,1136,1137,5,91,0,0,1137,
        153,1,0,0,0,1138,1139,5,91,0,0,1139,155,1,0,0,0,1140,1141,3,158,
        79,0,1141,157,1,0,0,0,1142,1143,3,396,198,0,1143,159,1,0,0,0,1144,
        1145,3,394,197,0,1145,161,1,0,0,0,1146,1147,3,164,82,0,1147,163,
        1,0,0,0,1148,1151,5,90,0,0,1149,1150,5,48,0,0,1150,1152,5,90,0,0,
        1151,1149,1,0,0,0,1152,1153,1,0,0,0,1153,1151,1,0,0,0,1153,1154,
        1,0,0,0,1154,165,1,0,0,0,1155,1160,5,90,0,0,1156,1157,5,48,0,0,1157,
        1159,5,90,0,0,1158,1156,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,
        0,0,1160,1161,1,0,0,0,1161,167,1,0,0,0,1162,1160,1,0,0,0,1163,1164,
        5,42,0,0,1164,1165,3,134,67,0,1165,1166,5,45,0,0,1166,169,1,0,0,
        0,1167,1169,5,43,0,0,1168,1170,3,174,87,0,1169,1168,1,0,0,0,1169,
        1170,1,0,0,0,1170,1171,1,0,0,0,1171,1178,5,46,0,0,1172,1174,5,42,
        0,0,1173,1175,3,172,86,0,1174,1173,1,0,0,0,1174,1175,1,0,0,0,1175,
        1176,1,0,0,0,1176,1178,5,45,0,0,1177,1167,1,0,0,0,1177,1172,1,0,
        0,0,1178,171,1,0,0,0,1179,1180,3,176,88,0,1180,1182,5,50,0,0,1181,
        1183,3,174,87,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,173,1,0,
        0,0,1184,1189,3,176,88,0,1185,1186,5,50,0,0,1186,1188,3,176,88,0,
        1187,1185,1,0,0,0,1188,1191,1,0,0,0,1189,1187,1,0,0,0,1189,1190,
        1,0,0,0,1190,1193,1,0,0,0,1191,1189,1,0,0,0,1192,1194,5,50,0,0,1193,
        1192,1,0,0,0,1193,1194,1,0,0,0,1194,175,1,0,0,0,1195,1198,3,178,
        89,0,1196,1198,3,134,67,0,1197,1195,1,0,0,0,1197,1196,1,0,0,0,1198,
        177,1,0,0,0,1199,1200,5,54,0,0,1200,1201,5,90,0,0,1201,179,1,0,0,
        0,1202,1203,5,44,0,0,1203,1223,5,47,0,0,1204,1205,5,44,0,0,1205,
        1207,3,186,93,0,1206,1208,5,50,0,0,1207,1206,1,0,0,0,1207,1208,1,
        0,0,0,1208,1209,1,0,0,0,1209,1210,5,47,0,0,1210,1223,1,0,0,0,1211,
        1212,5,44,0,0,1212,1215,3,182,91,0,1213,1214,5,50,0,0,1214,1216,
        3,186,93,0,1215,1213,1,0,0,0,1215,1216,1,0,0,0,1216,1218,1,0,0,0,
        1217,1219,5,50,0,0,1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,1220,
        1,0,0,0,1220,1221,5,47,0,0,1221,1223,1,0,0,0,1222,1202,1,0,0,0,1222,
        1204,1,0,0,0,1222,1211,1,0,0,0,1223,181,1,0,0,0,1224,1229,3,184,
        92,0,1225,1226,5,50,0,0,1226,1228,3,184,92,0,1227,1225,1,0,0,0,1228,
        1231,1,0,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,183,1,0,0,
        0,1231,1229,1,0,0,0,1232,1235,3,144,72,0,1233,1235,3,164,82,0,1234,
        1232,1,0,0,0,1234,1233,1,0,0,0,1235,1236,1,0,0,0,1236,1237,5,49,
        0,0,1237,1238,3,134,67,0,1238,185,1,0,0,0,1239,1240,5,70,0,0,1240,
        1241,3,158,79,0,1241,187,1,0,0,0,1242,1243,3,166,83,0,1243,1255,
        5,42,0,0,1244,1247,3,190,95,0,1245,1246,5,50,0,0,1246,1248,3,192,
        96,0,1247,1245,1,0,0,0,1247,1248,1,0,0,0,1248,1251,1,0,0,0,1249,
        1251,3,192,96,0,1250,1244,1,0,0,0,1250,1249,1,0,0,0,1251,1253,1,
        0,0,0,1252,1254,5,50,0,0,1253,1252,1,0,0,0,1253,1254,1,0,0,0,1254,
        1256,1,0,0,0,1255,1250,1,0,0,0,1255,1256,1,0,0,0,1256,1257,1,0,0,
        0,1257,1258,5,45,0,0,1258,189,1,0,0,0,1259,1264,3,134,67,0,1260,
        1261,5,50,0,0,1261,1263,3,134,67,0,1262,1260,1,0,0,0,1263,1266,1,
        0,0,0,1264,1262,1,0,0,0,1264,1265,1,0,0,0,1265,191,1,0,0,0,1266,
        1264,1,0,0,0,1267,1272,3,194,97,0,1268,1269,5,50,0,0,1269,1271,3,
        194,97,0,1270,1268,1,0,0,0,1271,1274,1,0,0,0,1272,1270,1,0,0,0,1272,
        1273,1,0,0,0,1273,193,1,0,0,0,1274,1272,1,0,0,0,1275,1276,5,90,0,
        0,1276,1277,5,60,0,0,1277,1278,3,134,67,0,1278,195,1,0,0,0,1279,
        1280,3,388,194,0,1280,1282,5,90,0,0,1281,1283,3,198,99,0,1282,1281,
        1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1285,5,60,0,0,1285,
        1286,3,208,104,0,1286,197,1,0,0,0,1287,1288,5,43,0,0,1288,1289,3,
        200,100,0,1289,1290,5,46,0,0,1290,199,1,0,0,0,1291,1296,3,202,101,
        0,1292,1293,5,50,0,0,1293,1295,3,202,101,0,1294,1292,1,0,0,0,1295,
        1298,1,0,0,0,1296,1294,1,0,0,0,1296,1297,1,0,0,0,1297,1300,1,0,0,
        0,1298,1296,1,0,0,0,1299,1301,5,50,0,0,1300,1299,1,0,0,0,1300,1301,
        1,0,0,0,1301,201,1,0,0,0,1302,1304,5,90,0,0,1303,1305,3,204,102,
        0,1304,1303,1,0,0,0,1304,1305,1,0,0,0,1305,1311,1,0,0,0,1306,1307,
        5,54,0,0,1307,1311,5,90,0,0,1308,1309,5,70,0,0,1309,1311,5,90,0,
        0,1310,1302,1,0,0,0,1310,1306,1,0,0,0,1310,1308,1,0,0,0,1311,203,
        1,0,0,0,1312,1313,5,49,0,0,1313,1314,3,208,104,0,1314,205,1,0,0,
        0,1315,1320,3,208,104,0,1316,1317,5,50,0,0,1317,1319,3,208,104,0,
        1318,1316,1,0,0,0,1319,1322,1,0,0,0,1320,1318,1,0,0,0,1320,1321,
        1,0,0,0,1321,1324,1,0,0,0,1322,1320,1,0,0,0,1323,1325,5,50,0,0,1324,
        1323,1,0,0,0,1324,1325,1,0,0,0,1325,207,1,0,0,0,1326,1332,3,224,
        112,0,1327,1328,5,39,0,0,1328,1329,3,224,112,0,1329,1330,5,9,0,0,
        1330,1331,3,208,104,0,1331,1333,1,0,0,0,1332,1327,1,0,0,0,1332,1333,
        1,0,0,0,1333,1336,1,0,0,0,1334,1336,3,282,141,0,1335,1326,1,0,0,
        0,1335,1334,1,0,0,0,1336,209,1,0,0,0,1337,1343,5,41,0,0,1338,1339,
        5,29,0,0,1339,1344,3,208,104,0,1340,1342,3,212,106,0,1341,1340,1,
        0,0,0,1341,1342,1,0,0,0,1342,1344,1,0,0,0,1343,1338,1,0,0,0,1343,
        1341,1,0,0,0,1344,211,1,0,0,0,1345,1350,3,214,107,0,1346,1347,5,
        50,0,0,1347,1349,3,214,107,0,1348,1346,1,0,0,0,1349,1352,1,0,0,0,
        1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,1354,1,0,0,0,1352,1350,
        1,0,0,0,1353,1355,5,50,0,0,1354,1353,1,0,0,0,1354,1355,1,0,0,0,1355,
        213,1,0,0,0,1356,1357,5,54,0,0,1357,1360,3,254,127,0,1358,1360,3,
        208,104,0,1359,1356,1,0,0,0,1359,1358,1,0,0,0,1360,215,1,0,0,0,1361,
        1366,3,218,109,0,1362,1363,5,50,0,0,1363,1365,3,218,109,0,1364,1362,
        1,0,0,0,1365,1368,1,0,0,0,1366,1364,1,0,0,0,1366,1367,1,0,0,0,1367,
        1370,1,0,0,0,1368,1366,1,0,0,0,1369,1371,5,50,0,0,1370,1369,1,0,
        0,0,1370,1371,1,0,0,0,1371,217,1,0,0,0,1372,1373,5,54,0,0,1373,1376,
        3,254,127,0,1374,1376,3,222,111,0,1375,1372,1,0,0,0,1375,1374,1,
        0,0,0,1376,219,1,0,0,0,1377,1378,5,90,0,0,1378,1379,5,88,0,0,1379,
        1380,3,208,104,0,1380,221,1,0,0,0,1381,1384,3,220,110,0,1382,1384,
        3,208,104,0,1383,1381,1,0,0,0,1383,1382,1,0,0,0,1384,223,1,0,0,0,
        1385,1390,3,226,113,0,1386,1387,5,40,0,0,1387,1389,3,226,113,0,1388,
        1386,1,0,0,0,1389,1392,1,0,0,0,1390,1388,1,0,0,0,1390,1391,1,0,0,
        0,1391,225,1,0,0,0,1392,1390,1,0,0,0,1393,1398,3,228,114,0,1394,
        1395,5,22,0,0,1395,1397,3,228,114,0,1396,1394,1,0,0,0,1397,1400,
        1,0,0,0,1398,1396,1,0,0,0,1398,1399,1,0,0,0,1399,227,1,0,0,0,1400,
        1398,1,0,0,0,1401,1402,5,35,0,0,1402,1405,3,228,114,0,1403,1405,
        3,230,115,0,1404,1401,1,0,0,0,1404,1403,1,0,0,0,1405,229,1,0,0,0,
        1406,1410,3,254,127,0,1407,1409,3,232,116,0,1408,1407,1,0,0,0,1409,
        1412,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,0,1411,231,1,0,0,
        0,1412,1410,1,0,0,0,1413,1424,3,234,117,0,1414,1424,3,236,118,0,
        1415,1424,3,238,119,0,1416,1424,3,240,120,0,1417,1424,3,242,121,
        0,1418,1424,3,244,122,0,1419,1424,3,246,123,0,1420,1424,3,248,124,
        0,1421,1424,3,250,125,0,1422,1424,3,252,126,0,1423,1413,1,0,0,0,
        1423,1414,1,0,0,0,1423,1415,1,0,0,0,1423,1416,1,0,0,0,1423,1417,
        1,0,0,0,1423,1418,1,0,0,0,1423,1419,1,0,0,0,1423,1420,1,0,0,0,1423,
        1421,1,0,0,0,1423,1422,1,0,0,0,1424,233,1,0,0,0,1425,1426,5,62,0,
        0,1426,1427,3,254,127,0,1427,235,1,0,0,0,1428,1429,5,63,0,0,1429,
        1430,3,254,127,0,1430,237,1,0,0,0,1431,1432,5,64,0,0,1432,1433,3,
        254,127,0,1433,239,1,0,0,0,1434,1435,5,58,0,0,1435,1436,3,254,127,
        0,1436,241,1,0,0,0,1437,1438,5,65,0,0,1438,1439,3,254,127,0,1439,
        243,1,0,0,0,1440,1441,5,59,0,0,1441,1442,3,254,127,0,1442,245,1,
        0,0,0,1443,1444,5,35,0,0,1444,1445,5,15,0,0,1445,1446,3,254,127,
        0,1446,247,1,0,0,0,1447,1448,5,15,0,0,1448,1449,3,254,127,0,1449,
        249,1,0,0,0,1450,1451,5,20,0,0,1451,1452,5,35,0,0,1452,1453,3,254,
        127,0,1453,251,1,0,0,0,1454,1455,5,20,0,0,1455,1456,3,254,127,0,
        1456,253,1,0,0,0,1457,1458,6,127,-1,0,1458,1459,3,256,128,0,1459,
        1465,1,0,0,0,1460,1461,10,2,0,0,1461,1462,5,56,0,0,1462,1464,3,256,
        128,0,1463,1460,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,
        1466,1,0,0,0,1466,255,1,0,0,0,1467,1465,1,0,0,0,1468,1469,6,128,
        -1,0,1469,1470,3,258,129,0,1470,1476,1,0,0,0,1471,1472,10,2,0,0,
        1472,1473,5,67,0,0,1473,1475,3,258,129,0,1474,1471,1,0,0,0,1475,
        1478,1,0,0,0,1476,1474,1,0,0,0,1476,1477,1,0,0,0,1477,257,1,0,0,
        0,1478,1476,1,0,0,0,1479,1480,6,129,-1,0,1480,1481,3,260,130,0,1481,
        1487,1,0,0,0,1482,1483,10,2,0,0,1483,1484,5,57,0,0,1484,1486,3,260,
        130,0,1485,1482,1,0,0,0,1486,1489,1,0,0,0,1487,1485,1,0,0,0,1487,
        1488,1,0,0,0,1488,259,1,0,0,0,1489,1487,1,0,0,0,1490,1491,6,130,
        -1,0,1491,1492,3,262,131,0,1492,1498,1,0,0,0,1493,1494,10,2,0,0,
        1494,1495,7,3,0,0,1495,1497,3,262,131,0,1496,1493,1,0,0,0,1497,1500,
        1,0,0,0,1498,1496,1,0,0,0,1498,1499,1,0,0,0,1499,261,1,0,0,0,1500,
        1498,1,0,0,0,1501,1502,6,131,-1,0,1502,1503,3,264,132,0,1503,1509,
        1,0,0,0,1504,1505,10,2,0,0,1505,1506,7,2,0,0,1506,1508,3,264,132,
        0,1507,1504,1,0,0,0,1508,1511,1,0,0,0,1509,1507,1,0,0,0,1509,1510,
        1,0,0,0,1510,263,1,0,0,0,1511,1509,1,0,0,0,1512,1513,6,132,-1,0,
        1513,1514,3,266,133,0,1514,1520,1,0,0,0,1515,1516,10,2,0,0,1516,
        1517,7,4,0,0,1517,1519,3,266,133,0,1518,1515,1,0,0,0,1519,1522,1,
        0,0,0,1520,1518,1,0,0,0,1520,1521,1,0,0,0,1521,265,1,0,0,0,1522,
        1520,1,0,0,0,1523,1524,5,52,0,0,1524,1531,3,266,133,0,1525,1526,
        5,53,0,0,1526,1531,3,266,133,0,1527,1528,5,66,0,0,1528,1531,3,266,
        133,0,1529,1531,3,268,134,0,1530,1523,1,0,0,0,1530,1525,1,0,0,0,
        1530,1527,1,0,0,0,1530,1529,1,0,0,0,1531,267,1,0,0,0,1532,1535,3,
        270,135,0,1533,1534,5,70,0,0,1534,1536,3,266,133,0,1535,1533,1,0,
        0,0,1535,1536,1,0,0,0,1536,269,1,0,0,0,1537,1538,5,8,0,0,1538,1541,
        3,272,136,0,1539,1541,3,272,136,0,1540,1537,1,0,0,0,1540,1539,1,
        0,0,0,1541,271,1,0,0,0,1542,1543,6,136,-1,0,1543,1544,3,278,139,
        0,1544,1562,1,0,0,0,1545,1558,10,2,0,0,1546,1547,5,48,0,0,1547,1559,
        5,90,0,0,1548,1559,3,342,171,0,1549,1551,5,42,0,0,1550,1552,3,346,
        173,0,1551,1550,1,0,0,0,1551,1552,1,0,0,0,1552,1553,1,0,0,0,1553,
        1559,5,45,0,0,1554,1555,5,43,0,0,1555,1556,3,274,137,0,1556,1557,
        5,46,0,0,1557,1559,1,0,0,0,1558,1546,1,0,0,0,1558,1548,1,0,0,0,1558,
        1549,1,0,0,0,1558,1554,1,0,0,0,1559,1561,1,0,0,0,1560,1545,1,0,0,
        0,1561,1564,1,0,0,0,1562,1560,1,0,0,0,1562,1563,1,0,0,0,1563,273,
        1,0,0,0,1564,1562,1,0,0,0,1565,1584,3,276,138,0,1566,1569,3,276,
        138,0,1567,1569,3,354,177,0,1568,1566,1,0,0,0,1568,1567,1,0,0,0,
        1569,1577,1,0,0,0,1570,1573,5,50,0,0,1571,1574,3,276,138,0,1572,
        1574,3,354,177,0,1573,1571,1,0,0,0,1573,1572,1,0,0,0,1574,1576,1,
        0,0,0,1575,1570,1,0,0,0,1576,1579,1,0,0,0,1577,1575,1,0,0,0,1577,
        1578,1,0,0,0,1578,1581,1,0,0,0,1579,1577,1,0,0,0,1580,1582,5,50,
        0,0,1581,1580,1,0,0,0,1581,1582,1,0,0,0,1582,1584,1,0,0,0,1583,1565,
        1,0,0,0,1583,1568,1,0,0,0,1584,275,1,0,0,0,1585,1587,3,208,104,0,
        1586,1585,1,0,0,0,1586,1587,1,0,0,0,1587,1588,1,0,0,0,1588,1590,
        5,49,0,0,1589,1591,3,208,104,0,1590,1589,1,0,0,0,1590,1591,1,0,0,
        0,1591,1596,1,0,0,0,1592,1594,5,49,0,0,1593,1595,3,208,104,0,1594,
        1593,1,0,0,0,1594,1595,1,0,0,0,1595,1597,1,0,0,0,1596,1592,1,0,0,
        0,1596,1597,1,0,0,0,1597,1600,1,0,0,0,1598,1600,3,222,111,0,1599,
        1586,1,0,0,0,1599,1598,1,0,0,0,1600,277,1,0,0,0,1601,1624,5,90,0,
        0,1602,1624,5,17,0,0,1603,1624,5,7,0,0,1604,1624,5,12,0,0,1605,1624,
        3,318,159,0,1606,1624,5,91,0,0,1607,1611,3,322,161,0,1608,1611,3,
        280,140,0,1609,1611,3,342,171,0,1610,1607,1,0,0,0,1610,1608,1,0,
        0,0,1610,1609,1,0,0,0,1611,1624,1,0,0,0,1612,1615,3,320,160,0,1613,
        1615,3,338,169,0,1614,1612,1,0,0,0,1614,1613,1,0,0,0,1615,1624,1,
        0,0,0,1616,1621,3,326,163,0,1617,1621,3,324,162,0,1618,1621,3,344,
        172,0,1619,1621,3,340,170,0,1620,1616,1,0,0,0,1620,1617,1,0,0,0,
        1620,1618,1,0,0,0,1620,1619,1,0,0,0,1621,1624,1,0,0,0,1622,1624,
        5,87,0,0,1623,1601,1,0,0,0,1623,1602,1,0,0,0,1623,1603,1,0,0,0,1623,
        1604,1,0,0,0,1623,1605,1,0,0,0,1623,1606,1,0,0,0,1623,1610,1,0,0,
        0,1623,1614,1,0,0,0,1623,1620,1,0,0,0,1623,1622,1,0,0,0,1624,279,
        1,0,0,0,1625,1628,5,42,0,0,1626,1629,3,210,105,0,1627,1629,3,222,
        111,0,1628,1626,1,0,0,0,1628,1627,1,0,0,0,1629,1630,1,0,0,0,1630,
        1631,5,45,0,0,1631,281,1,0,0,0,1632,1634,5,25,0,0,1633,1635,3,284,
        142,0,1634,1633,1,0,0,0,1634,1635,1,0,0,0,1635,1636,1,0,0,0,1636,
        1637,5,49,0,0,1637,1638,3,208,104,0,1638,283,1,0,0,0,1639,1640,3,
        286,143,0,1640,285,1,0,0,0,1641,1645,3,288,144,0,1642,1644,3,296,
        148,0,1643,1642,1,0,0,0,1644,1647,1,0,0,0,1645,1643,1,0,0,0,1645,
        1646,1,0,0,0,1646,1651,1,0,0,0,1647,1645,1,0,0,0,1648,1650,3,298,
        149,0,1649,1648,1,0,0,0,1650,1653,1,0,0,0,1651,1649,1,0,0,0,1651,
        1652,1,0,0,0,1652,1655,1,0,0,0,1653,1651,1,0,0,0,1654,1656,3,292,
        146,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,1691,1,0,0,0,1657,
        1661,3,290,145,0,1658,1660,3,298,149,0,1659,1658,1,0,0,0,1660,1663,
        1,0,0,0,1661,1659,1,0,0,0,1661,1662,1,0,0,0,1662,1665,1,0,0,0,1663,
        1661,1,0,0,0,1664,1666,3,292,146,0,1665,1664,1,0,0,0,1665,1666,1,
        0,0,0,1666,1691,1,0,0,0,1667,1669,3,296,148,0,1668,1667,1,0,0,0,
        1669,1670,1,0,0,0,1670,1668,1,0,0,0,1670,1671,1,0,0,0,1671,1675,
        1,0,0,0,1672,1674,3,298,149,0,1673,1672,1,0,0,0,1674,1677,1,0,0,
        0,1675,1673,1,0,0,0,1675,1676,1,0,0,0,1676,1679,1,0,0,0,1677,1675,
        1,0,0,0,1678,1680,3,292,146,0,1679,1678,1,0,0,0,1679,1680,1,0,0,
        0,1680,1691,1,0,0,0,1681,1683,3,298,149,0,1682,1681,1,0,0,0,1683,
        1684,1,0,0,0,1684,1682,1,0,0,0,1684,1685,1,0,0,0,1685,1687,1,0,0,
        0,1686,1688,3,292,146,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,
        1691,1,0,0,0,1689,1691,3,292,146,0,1690,1641,1,0,0,0,1690,1657,1,
        0,0,0,1690,1668,1,0,0,0,1690,1682,1,0,0,0,1690,1689,1,0,0,0,1691,
        287,1,0,0,0,1692,1694,3,296,148,0,1693,1692,1,0,0,0,1694,1695,1,
        0,0,0,1695,1693,1,0,0,0,1695,1696,1,0,0,0,1696,1697,1,0,0,0,1697,
        1699,5,55,0,0,1698,1700,5,50,0,0,1699,1698,1,0,0,0,1699,1700,1,0,
        0,0,1700,289,1,0,0,0,1701,1703,3,296,148,0,1702,1701,1,0,0,0,1703,
        1706,1,0,0,0,1704,1702,1,0,0,0,1704,1705,1,0,0,0,1705,1708,1,0,0,
        0,1706,1704,1,0,0,0,1707,1709,3,298,149,0,1708,1707,1,0,0,0,1709,
        1710,1,0,0,0,1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1712,1,0,0,
        0,1712,1714,5,55,0,0,1713,1715,5,50,0,0,1714,1713,1,0,0,0,1714,1715,
        1,0,0,0,1715,291,1,0,0,0,1716,1717,5,54,0,0,1717,1721,3,296,148,
        0,1718,1720,3,300,150,0,1719,1718,1,0,0,0,1720,1723,1,0,0,0,1721,
        1719,1,0,0,0,1721,1722,1,0,0,0,1722,1725,1,0,0,0,1723,1721,1,0,0,
        0,1724,1726,3,294,147,0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,
        1739,1,0,0,0,1727,1728,5,54,0,0,1728,1730,5,50,0,0,1729,1731,3,300,
        150,0,1730,1729,1,0,0,0,1731,1732,1,0,0,0,1732,1730,1,0,0,0,1732,
        1733,1,0,0,0,1733,1735,1,0,0,0,1734,1736,3,294,147,0,1735,1734,1,
        0,0,0,1735,1736,1,0,0,0,1736,1739,1,0,0,0,1737,1739,3,294,147,0,
        1738,1716,1,0,0,0,1738,1727,1,0,0,0,1738,1737,1,0,0,0,1739,293,1,
        0,0,0,1740,1741,5,70,0,0,1741,1742,3,296,148,0,1742,295,1,0,0,0,
        1743,1745,3,302,151,0,1744,1746,5,50,0,0,1745,1744,1,0,0,0,1745,
        1746,1,0,0,0,1746,297,1,0,0,0,1747,1748,3,302,151,0,1748,1750,3,
        100,50,0,1749,1751,5,50,0,0,1750,1749,1,0,0,0,1750,1751,1,0,0,0,
        1751,299,1,0,0,0,1752,1754,3,302,151,0,1753,1755,3,100,50,0,1754,
        1753,1,0,0,0,1754,1755,1,0,0,0,1755,1757,1,0,0,0,1756,1758,5,50,
        0,0,1757,1756,1,0,0,0,1757,1758,1,0,0,0,1758,301,1,0,0,0,1759,1760,
        5,90,0,0,1760,303,1,0,0,0,1761,1764,3,306,153,0,1762,1764,5,5,0,
        0,1763,1761,1,0,0,0,1763,1762,1,0,0,0,1764,305,1,0,0,0,1765,1768,
        5,44,0,0,1766,1769,3,210,105,0,1767,1769,3,212,106,0,1768,1766,1,
        0,0,0,1768,1767,1,0,0,0,1769,1771,1,0,0,0,1770,1772,5,60,0,0,1771,
        1770,1,0,0,0,1771,1772,1,0,0,0,1772,1774,1,0,0,0,1773,1775,3,308,
        154,0,1774,1773,1,0,0,0,1774,1775,1,0,0,0,1775,1777,1,0,0,0,1776,
        1778,3,310,155,0,1777,1776,1,0,0,0,1777,1778,1,0,0,0,1778,1779,1,
        0,0,0,1779,1780,5,47,0,0,1780,307,1,0,0,0,1781,1782,5,89,0,0,1782,
        1783,5,90,0,0,1783,309,1,0,0,0,1784,1788,5,49,0,0,1785,1787,3,312,
        156,0,1786,1785,1,0,0,0,1787,1790,1,0,0,0,1788,1786,1,0,0,0,1788,
        1789,1,0,0,0,1789,311,1,0,0,0,1790,1788,1,0,0,0,1791,1794,5,5,0,
        0,1792,1794,3,306,153,0,1793,1791,1,0,0,0,1793,1792,1,0,0,0,1794,
        313,1,0,0,0,1795,1799,5,4,0,0,1796,1798,3,304,152,0,1797,1796,1,
        0,0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,
        1802,1,0,0,0,1801,1799,1,0,0,0,1802,1803,5,6,0,0,1803,315,1,0,0,
        0,1804,1805,5,92,0,0,1805,317,1,0,0,0,1806,1809,3,314,157,0,1807,
        1809,3,316,158,0,1808,1806,1,0,0,0,1808,1807,1,0,0,0,1809,1810,1,
        0,0,0,1810,1808,1,0,0,0,1810,1811,1,0,0,0,1811,319,1,0,0,0,1812,
        1814,5,43,0,0,1813,1815,3,216,108,0,1814,1813,1,0,0,0,1814,1815,
        1,0,0,0,1815,1816,1,0,0,0,1816,1817,5,46,0,0,1817,321,1,0,0,0,1818,
        1824,5,42,0,0,1819,1820,3,218,109,0,1820,1822,5,50,0,0,1821,1823,
        3,216,108,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,1825,1,0,0,
        0,1824,1819,1,0,0,0,1824,1825,1,0,0,0,1825,1826,1,0,0,0,1826,1827,
        5,45,0,0,1827,323,1,0,0,0,1828,1829,5,44,0,0,1829,1830,3,216,108,
        0,1830,1831,5,47,0,0,1831,325,1,0,0,0,1832,1834,5,44,0,0,1833,1835,
        3,328,164,0,1834,1833,1,0,0,0,1834,1835,1,0,0,0,1835,1836,1,0,0,
        0,1836,1837,5,47,0,0,1837,327,1,0,0,0,1838,1843,3,330,165,0,1839,
        1840,5,50,0,0,1840,1842,3,330,165,0,1841,1839,1,0,0,0,1842,1845,
        1,0,0,0,1843,1841,1,0,0,0,1843,1844,1,0,0,0,1844,1847,1,0,0,0,1845,
        1843,1,0,0,0,1846,1848,5,50,0,0,1847,1846,1,0,0,0,1847,1848,1,0,
        0,0,1848,329,1,0,0,0,1849,1850,5,70,0,0,1850,1853,3,254,127,0,1851,
        1853,3,332,166,0,1852,1849,1,0,0,0,1852,1851,1,0,0,0,1853,331,1,
        0,0,0,1854,1855,3,208,104,0,1855,1856,5,49,0,0,1856,1857,3,208,104,
        0,1857,333,1,0,0,0,1858,1860,3,336,168,0,1859,1858,1,0,0,0,1860,
        1861,1,0,0,0,1861,1859,1,0,0,0,1861,1862,1,0,0,0,1862,335,1,0,0,
        0,1863,1865,5,37,0,0,1864,1863,1,0,0,0,1864,1865,1,0,0,0,1865,1866,
        1,0,0,0,1866,1867,5,24,0,0,1867,1868,3,360,180,0,1868,1869,5,15,
        0,0,1869,1874,3,224,112,0,1870,1871,5,39,0,0,1871,1873,3,224,112,
        0,1872,1870,1,0,0,0,1873,1876,1,0,0,0,1874,1872,1,0,0,0,1874,1875,
        1,0,0,0,1875,337,1,0,0,0,1876,1874,1,0,0,0,1877,1878,5,43,0,0,1878,
        1879,3,222,111,0,1879,1880,3,334,167,0,1880,1881,5,46,0,0,1881,339,
        1,0,0,0,1882,1883,5,44,0,0,1883,1884,3,222,111,0,1884,1885,3,334,
        167,0,1885,1886,5,47,0,0,1886,341,1,0,0,0,1887,1890,5,42,0,0,1888,
        1891,3,220,110,0,1889,1891,3,208,104,0,1890,1888,1,0,0,0,1890,1889,
        1,0,0,0,1891,1892,1,0,0,0,1892,1893,3,334,167,0,1893,1894,5,45,0,
        0,1894,343,1,0,0,0,1895,1896,5,44,0,0,1896,1897,3,332,166,0,1897,
        1898,3,334,167,0,1898,1899,5,47,0,0,1899,345,1,0,0,0,1900,1902,3,
        348,174,0,1901,1903,5,50,0,0,1902,1901,1,0,0,0,1902,1903,1,0,0,0,
        1903,347,1,0,0,0,1904,1909,3,350,175,0,1905,1906,5,50,0,0,1906,1908,
        3,350,175,0,1907,1905,1,0,0,0,1908,1911,1,0,0,0,1909,1907,1,0,0,
        0,1909,1910,1,0,0,0,1910,1914,1,0,0,0,1911,1909,1,0,0,0,1912,1913,
        5,50,0,0,1913,1915,3,352,176,0,1914,1912,1,0,0,0,1914,1915,1,0,0,
        0,1915,1918,1,0,0,0,1916,1918,3,352,176,0,1917,1904,1,0,0,0,1917,
        1916,1,0,0,0,1918,349,1,0,0,0,1919,1923,3,354,177,0,1920,1923,3,
        220,110,0,1921,1923,3,208,104,0,1922,1919,1,0,0,0,1922,1920,1,0,
        0,0,1922,1921,1,0,0,0,1923,351,1,0,0,0,1924,1929,3,356,178,0,1925,
        1926,5,50,0,0,1926,1928,3,356,178,0,1927,1925,1,0,0,0,1928,1931,
        1,0,0,0,1929,1927,1,0,0,0,1929,1930,1,0,0,0,1930,1941,1,0,0,0,1931,
        1929,1,0,0,0,1932,1933,5,50,0,0,1933,1938,3,358,179,0,1934,1935,
        5,50,0,0,1935,1937,3,358,179,0,1936,1934,1,0,0,0,1937,1940,1,0,0,
        0,1938,1936,1,0,0,0,1938,1939,1,0,0,0,1939,1942,1,0,0,0,1940,1938,
        1,0,0,0,1941,1932,1,0,0,0,1941,1942,1,0,0,0,1942,1952,1,0,0,0,1943,
        1948,3,358,179,0,1944,1945,5,50,0,0,1945,1947,3,358,179,0,1946,1944,
        1,0,0,0,1947,1950,1,0,0,0,1948,1946,1,0,0,0,1948,1949,1,0,0,0,1949,
        1952,1,0,0,0,1950,1948,1,0,0,0,1951,1924,1,0,0,0,1951,1943,1,0,0,
        0,1952,353,1,0,0,0,1953,1954,5,54,0,0,1954,1955,3,208,104,0,1955,
        355,1,0,0,0,1956,1957,5,90,0,0,1957,1958,5,60,0,0,1958,1961,3,208,
        104,0,1959,1961,3,354,177,0,1960,1956,1,0,0,0,1960,1959,1,0,0,0,
        1961,357,1,0,0,0,1962,1963,5,90,0,0,1963,1964,5,60,0,0,1964,1968,
        3,208,104,0,1965,1966,5,70,0,0,1966,1968,3,208,104,0,1967,1962,1,
        0,0,0,1967,1965,1,0,0,0,1968,359,1,0,0,0,1969,1974,3,366,183,0,1970,
        1971,5,50,0,0,1971,1973,3,366,183,0,1972,1970,1,0,0,0,1973,1976,
        1,0,0,0,1974,1972,1,0,0,0,1974,1975,1,0,0,0,1975,1978,1,0,0,0,1976,
        1974,1,0,0,0,1977,1979,5,50,0,0,1978,1977,1,0,0,0,1978,1979,1,0,
        0,0,1979,361,1,0,0,0,1980,1983,3,366,183,0,1981,1982,5,50,0,0,1982,
        1984,3,366,183,0,1983,1981,1,0,0,0,1984,1985,1,0,0,0,1985,1983,1,
        0,0,0,1985,1986,1,0,0,0,1986,1988,1,0,0,0,1987,1989,5,50,0,0,1988,
        1987,1,0,0,0,1988,1989,1,0,0,0,1989,363,1,0,0,0,1990,2001,3,366,
        183,0,1991,2002,5,50,0,0,1992,1993,5,50,0,0,1993,1995,3,366,183,
        0,1994,1992,1,0,0,0,1995,1996,1,0,0,0,1996,1994,1,0,0,0,1996,1997,
        1,0,0,0,1997,1999,1,0,0,0,1998,2000,5,50,0,0,1999,1998,1,0,0,0,1999,
        2000,1,0,0,0,2000,2002,1,0,0,0,2001,1991,1,0,0,0,2001,1994,1,0,0,
        0,2002,365,1,0,0,0,2003,2004,5,54,0,0,2004,2007,3,366,183,0,2005,
        2007,3,368,184,0,2006,2003,1,0,0,0,2006,2005,1,0,0,0,2007,367,1,
        0,0,0,2008,2015,3,376,188,0,2009,2010,5,48,0,0,2010,2016,5,90,0,
        0,2011,2012,5,43,0,0,2012,2013,3,274,137,0,2013,2014,5,46,0,0,2014,
        2016,1,0,0,0,2015,2009,1,0,0,0,2015,2011,1,0,0,0,2016,2019,1,0,0,
        0,2017,2019,3,370,185,0,2018,2008,1,0,0,0,2018,2017,1,0,0,0,2019,
        369,1,0,0,0,2020,2036,5,90,0,0,2021,2022,5,42,0,0,2022,2023,3,368,
        184,0,2023,2024,5,45,0,0,2024,2036,1,0,0,0,2025,2027,5,42,0,0,2026,
        2028,3,364,182,0,2027,2026,1,0,0,0,2027,2028,1,0,0,0,2028,2029,1,
        0,0,0,2029,2036,5,45,0,0,2030,2032,5,43,0,0,2031,2033,3,362,181,
        0,2032,2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2036,
        5,46,0,0,2035,2020,1,0,0,0,2035,2021,1,0,0,0,2035,2025,1,0,0,0,2035,
        2030,1,0,0,0,2036,371,1,0,0,0,2037,2044,3,374,187,0,2038,2044,5,
        90,0,0,2039,2040,5,42,0,0,2040,2041,3,372,186,0,2041,2042,5,45,0,
        0,2042,2044,1,0,0,0,2043,2037,1,0,0,0,2043,2038,1,0,0,0,2043,2039,
        1,0,0,0,2044,373,1,0,0,0,2045,2052,3,376,188,0,2046,2047,5,48,0,
        0,2047,2053,5,90,0,0,2048,2049,5,43,0,0,2049,2050,3,274,137,0,2050,
        2051,5,46,0,0,2051,2053,1,0,0,0,2052,2046,1,0,0,0,2052,2048,1,0,
        0,0,2053,375,1,0,0,0,2054,2055,6,188,-1,0,2055,2056,3,278,139,0,
        2056,2074,1,0,0,0,2057,2070,10,2,0,0,2058,2059,5,48,0,0,2059,2071,
        5,90,0,0,2060,2061,5,43,0,0,2061,2062,3,274,137,0,2062,2063,5,46,
        0,0,2063,2071,1,0,0,0,2064,2071,3,342,171,0,2065,2067,5,42,0,0,2066,
        2068,3,346,173,0,2067,2066,1,0,0,0,2067,2068,1,0,0,0,2068,2069,1,
        0,0,0,2069,2071,5,45,0,0,2070,2058,1,0,0,0,2070,2060,1,0,0,0,2070,
        2064,1,0,0,0,2070,2065,1,0,0,0,2071,2073,1,0,0,0,2072,2057,1,0,0,
        0,2073,2076,1,0,0,0,2074,2072,1,0,0,0,2074,2075,1,0,0,0,2075,377,
        1,0,0,0,2076,2074,1,0,0,0,2077,2082,3,380,190,0,2078,2079,5,50,0,
        0,2079,2081,3,380,190,0,2080,2078,1,0,0,0,2081,2084,1,0,0,0,2082,
        2080,1,0,0,0,2082,2083,1,0,0,0,2083,2086,1,0,0,0,2084,2082,1,0,0,
        0,2085,2087,5,50,0,0,2086,2085,1,0,0,0,2086,2087,1,0,0,0,2087,379,
        1,0,0,0,2088,2095,3,376,188,0,2089,2090,5,48,0,0,2090,2096,5,90,
        0,0,2091,2092,5,43,0,0,2092,2093,3,274,137,0,2093,2094,5,46,0,0,
        2094,2096,1,0,0,0,2095,2089,1,0,0,0,2095,2091,1,0,0,0,2096,2099,
        1,0,0,0,2097,2099,3,382,191,0,2098,2088,1,0,0,0,2098,2097,1,0,0,
        0,2099,381,1,0,0,0,2100,2116,5,90,0,0,2101,2102,5,42,0,0,2102,2103,
        3,380,190,0,2103,2104,5,45,0,0,2104,2116,1,0,0,0,2105,2107,5,42,
        0,0,2106,2108,3,378,189,0,2107,2106,1,0,0,0,2107,2108,1,0,0,0,2108,
        2109,1,0,0,0,2109,2116,5,45,0,0,2110,2112,5,43,0,0,2111,2113,3,378,
        189,0,2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,2114,1,0,0,0,2114,
        2116,5,46,0,0,2115,2100,1,0,0,0,2115,2101,1,0,0,0,2115,2105,1,0,
        0,0,2115,2110,1,0,0,0,2116,383,1,0,0,0,2117,2122,3,208,104,0,2118,
        2119,5,50,0,0,2119,2121,3,208,104,0,2120,2118,1,0,0,0,2121,2124,
        1,0,0,0,2122,2120,1,0,0,0,2122,2123,1,0,0,0,2123,2137,1,0,0,0,2124,
        2122,1,0,0,0,2125,2135,5,50,0,0,2126,2127,5,54,0,0,2127,2131,3,208,
        104,0,2128,2129,5,50,0,0,2129,2130,5,70,0,0,2130,2132,3,208,104,
        0,2131,2128,1,0,0,0,2131,2132,1,0,0,0,2132,2136,1,0,0,0,2133,2134,
        5,70,0,0,2134,2136,3,208,104,0,2135,2126,1,0,0,0,2135,2133,1,0,0,
        0,2136,2138,1,0,0,0,2137,2125,1,0,0,0,2137,2138,1,0,0,0,2138,2149,
        1,0,0,0,2139,2140,5,54,0,0,2140,2144,3,208,104,0,2141,2142,5,50,
        0,0,2142,2143,5,70,0,0,2143,2145,3,208,104,0,2144,2141,1,0,0,0,2144,
        2145,1,0,0,0,2145,2149,1,0,0,0,2146,2147,5,70,0,0,2147,2149,3,208,
        104,0,2148,2117,1,0,0,0,2148,2139,1,0,0,0,2148,2146,1,0,0,0,2149,
        385,1,0,0,0,2150,2151,5,93,0,0,2151,2154,5,3,0,0,2152,2154,5,3,0,
        0,2153,2150,1,0,0,0,2153,2152,1,0,0,0,2154,387,1,0,0,0,2155,2156,
        4,194,9,0,2156,2157,5,90,0,0,2157,389,1,0,0,0,2158,2159,4,195,10,
        0,2159,2160,5,90,0,0,2160,391,1,0,0,0,2161,2162,4,196,11,0,2162,
        2163,5,90,0,0,2163,393,1,0,0,0,2164,2165,4,197,12,0,2165,2166,5,
        90,0,0,2166,395,1,0,0,0,2167,2168,4,198,13,0,2168,2169,5,90,0,0,
        2169,397,1,0,0,0,285,399,409,416,424,434,438,446,453,457,475,485,
        492,499,505,512,516,519,525,527,531,537,543,545,553,562,574,578,
        587,598,602,607,613,620,626,633,639,649,658,666,672,677,681,684,
        693,698,702,707,711,718,722,727,731,734,742,748,752,758,762,767,
        772,776,781,784,787,792,796,801,807,811,818,822,829,833,840,843,
        846,853,856,860,863,868,871,875,878,881,885,905,907,915,917,928,
        931,939,943,946,955,959,969,974,976,983,996,999,1002,1010,1013,1016,
        1018,1024,1026,1036,1053,1060,1063,1068,1078,1082,1093,1104,1112,
        1120,1127,1132,1153,1160,1169,1174,1177,1182,1189,1193,1197,1207,
        1215,1218,1222,1229,1234,1247,1250,1253,1255,1264,1272,1282,1296,
        1300,1304,1310,1320,1324,1332,1335,1341,1343,1350,1354,1359,1366,
        1370,1375,1383,1390,1398,1404,1410,1423,1465,1476,1487,1498,1509,
        1520,1530,1535,1540,1551,1558,1562,1568,1573,1577,1581,1583,1586,
        1590,1594,1596,1599,1610,1614,1620,1623,1628,1634,1645,1651,1655,
        1661,1665,1670,1675,1679,1684,1687,1690,1695,1699,1704,1710,1714,
        1721,1725,1732,1735,1738,1745,1750,1754,1757,1763,1768,1771,1774,
        1777,1788,1793,1799,1808,1810,1814,1822,1824,1834,1843,1847,1852,
        1861,1864,1874,1890,1902,1909,1914,1917,1922,1929,1938,1941,1948,
        1951,1960,1967,1974,1978,1985,1988,1996,1999,2001,2006,2015,2018,
        2027,2032,2035,2043,2052,2067,2070,2074,2082,2086,2095,2098,2107,
        2112,2115,2122,2131,2135,2137,2144,2148,2153
    ]

class PythonParser ( PythonParserBase ):

    grammarFileName = "PythonParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'False'", "'await'", 
                     "'else'", "'import'", "'pass'", "'None'", "'break'", 
                     "'except'", "'in'", "'raise'", "'True'", "'class'", 
                     "'finally'", "'is'", "'return'", "'and'", "'continue'", 
                     "'for'", "'lambda'", "'try'", "'as'", "'def'", "'from'", 
                     "'nonlocal'", "'while'", "'assert'", "'del'", "'global'", 
                     "'not'", "'with'", "'async'", "'elif'", "'if'", "'or'", 
                     "'yield'", "'('", "'['", "<INVALID>", "')'", "']'", 
                     "<INVALID>", "'.'", "':'", "','", "';'", "'+'", "'-'", 
                     "'*'", "'/'", "'|'", "'&'", "'<'", "'>'", "'='", "'%'", 
                     "'=='", "'!='", "'<='", "'>='", "'~'", "'^'", "'<<'", 
                     "'>>'", "'**'", "'+='", "'-='", "'*='", "'/='", "'%='", 
                     "'&='", "'|='", "'^='", "'<<='", "'>>='", "'**='", 
                     "'//'", "'//='", "'@'", "'@='", "'->'", "'...'", "':='", 
                     "'!'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "TYPE_COMMENT", "FSTRING_START", 
                      "FSTRING_MIDDLE", "FSTRING_END", "FALSE", "AWAIT", 
                      "ELSE", "IMPORT", "PASS", "NONE", "BREAK", "EXCEPT", 
                      "IN", "RAISE", "TRUE", "CLASS", "FINALLY", "IS", "RETURN", 
                      "AND", "CONTINUE", "FOR", "LAMBDA", "TRY", "AS", "DEF", 
                      "FROM", "NONLOCAL", "WHILE", "ASSERT", "DEL", "GLOBAL", 
                      "NOT", "WITH", "ASYNC", "ELIF", "IF", "OR", "YIELD", 
                      "LPAR", "LSQB", "LBRACE", "RPAR", "RSQB", "RBRACE", 
                      "DOT", "COLON", "COMMA", "SEMI", "PLUS", "MINUS", 
                      "STAR", "SLASH", "VBAR", "AMPER", "LESS", "GREATER", 
                      "EQUAL", "PERCENT", "EQEQUAL", "NOTEQUAL", "LESSEQUAL", 
                      "GREATEREQUAL", "TILDE", "CIRCUMFLEX", "LEFTSHIFT", 
                      "RIGHTSHIFT", "DOUBLESTAR", "PLUSEQUAL", "MINEQUAL", 
                      "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", 
                      "VBAREQUAL", "CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", 
                      "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASH", 
                      "DOUBLESLASHEQUAL", "AT", "ATEQUAL", "RARROW", "ELLIPSIS", 
                      "COLONEQUAL", "EXCLAMATION", "NAME", "NUMBER", "STRING", 
                      "NEWLINE", "COMMENT", "WS", "EXPLICIT_LINE_JOINING", 
                      "ERRORTOKEN" ]

    RULE_file_input = 0
    RULE_interactive = 1
    RULE_eval = 2
    RULE_func_type = 3
    RULE_fstring_input = 4
    RULE_statements = 5
    RULE_statement = 6
    RULE_statement_newline = 7
    RULE_simple_stmts = 8
    RULE_simple_stmt = 9
    RULE_compound_stmt = 10
    RULE_assignment = 11
    RULE_annotated_rhs = 12
    RULE_augassign = 13
    RULE_return_stmt = 14
    RULE_raise_stmt = 15
    RULE_global_stmt = 16
    RULE_nonlocal_stmt = 17
    RULE_del_stmt = 18
    RULE_yield_stmt = 19
    RULE_assert_stmt = 20
    RULE_import_stmt = 21
    RULE_import_name = 22
    RULE_import_from = 23
    RULE_import_from_targets = 24
    RULE_import_from_as_names = 25
    RULE_import_from_as_name = 26
    RULE_dotted_as_names = 27
    RULE_dotted_as_name = 28
    RULE_dotted_name = 29
    RULE_block = 30
    RULE_decorators = 31
    RULE_class_def = 32
    RULE_class_def_raw = 33
    RULE_function_def = 34
    RULE_function_def_raw = 35
    RULE_params = 36
    RULE_parameters = 37
    RULE_slash_no_default = 38
    RULE_slash_with_default = 39
    RULE_star_etc = 40
    RULE_kwds = 41
    RULE_param_no_default = 42
    RULE_param_no_default_star_annotation = 43
    RULE_param_with_default = 44
    RULE_param_maybe_default = 45
    RULE_param = 46
    RULE_param_star_annotation = 47
    RULE_annotation = 48
    RULE_star_annotation = 49
    RULE_default_assignment = 50
    RULE_if_stmt = 51
    RULE_elif_stmt = 52
    RULE_else_block = 53
    RULE_while_stmt = 54
    RULE_for_stmt = 55
    RULE_with_stmt = 56
    RULE_with_item = 57
    RULE_try_stmt = 58
    RULE_except_block = 59
    RULE_except_star_block = 60
    RULE_finally_block = 61
    RULE_match_stmt = 62
    RULE_subject_expr = 63
    RULE_case_block = 64
    RULE_guard = 65
    RULE_patterns = 66
    RULE_pattern = 67
    RULE_as_pattern = 68
    RULE_or_pattern = 69
    RULE_closed_pattern = 70
    RULE_literal_pattern = 71
    RULE_literal_expr = 72
    RULE_complex_number = 73
    RULE_signed_number = 74
    RULE_signed_real_number = 75
    RULE_real_number = 76
    RULE_imaginary_number = 77
    RULE_capture_pattern = 78
    RULE_pattern_capture_target = 79
    RULE_wildcard_pattern = 80
    RULE_value_pattern = 81
    RULE_attr = 82
    RULE_name_or_attr = 83
    RULE_group_pattern = 84
    RULE_sequence_pattern = 85
    RULE_open_sequence_pattern = 86
    RULE_maybe_sequence_pattern = 87
    RULE_maybe_star_pattern = 88
    RULE_star_pattern = 89
    RULE_mapping_pattern = 90
    RULE_items_pattern = 91
    RULE_key_value_pattern = 92
    RULE_double_star_pattern = 93
    RULE_class_pattern = 94
    RULE_positional_patterns = 95
    RULE_keyword_patterns = 96
    RULE_keyword_pattern = 97
    RULE_type_alias = 98
    RULE_type_params = 99
    RULE_type_param_seq = 100
    RULE_type_param = 101
    RULE_type_param_bound = 102
    RULE_expressions = 103
    RULE_expression = 104
    RULE_yield_expr = 105
    RULE_star_expressions = 106
    RULE_star_expression = 107
    RULE_star_named_expressions = 108
    RULE_star_named_expression = 109
    RULE_assignment_expression = 110
    RULE_named_expression = 111
    RULE_disjunction = 112
    RULE_conjunction = 113
    RULE_inversion = 114
    RULE_comparison = 115
    RULE_compare_op_bitwise_or_pair = 116
    RULE_eq_bitwise_or = 117
    RULE_noteq_bitwise_or = 118
    RULE_lte_bitwise_or = 119
    RULE_lt_bitwise_or = 120
    RULE_gte_bitwise_or = 121
    RULE_gt_bitwise_or = 122
    RULE_notin_bitwise_or = 123
    RULE_in_bitwise_or = 124
    RULE_isnot_bitwise_or = 125
    RULE_is_bitwise_or = 126
    RULE_bitwise_or = 127
    RULE_bitwise_xor = 128
    RULE_bitwise_and = 129
    RULE_shift_expr = 130
    RULE_sum = 131
    RULE_term = 132
    RULE_factor = 133
    RULE_power = 134
    RULE_await_primary = 135
    RULE_primary = 136
    RULE_slices = 137
    RULE_slice = 138
    RULE_atom = 139
    RULE_group = 140
    RULE_lambdef = 141
    RULE_lambda_params = 142
    RULE_lambda_parameters = 143
    RULE_lambda_slash_no_default = 144
    RULE_lambda_slash_with_default = 145
    RULE_lambda_star_etc = 146
    RULE_lambda_kwds = 147
    RULE_lambda_param_no_default = 148
    RULE_lambda_param_with_default = 149
    RULE_lambda_param_maybe_default = 150
    RULE_lambda_param = 151
    RULE_fstring_middle = 152
    RULE_fstring_replacement_field = 153
    RULE_fstring_conversion = 154
    RULE_fstring_full_format_spec = 155
    RULE_fstring_format_spec = 156
    RULE_fstring = 157
    RULE_string = 158
    RULE_strings = 159
    RULE_list = 160
    RULE_tuple = 161
    RULE_set = 162
    RULE_dict = 163
    RULE_double_starred_kvpairs = 164
    RULE_double_starred_kvpair = 165
    RULE_kvpair = 166
    RULE_for_if_clauses = 167
    RULE_for_if_clause = 168
    RULE_listcomp = 169
    RULE_setcomp = 170
    RULE_genexp = 171
    RULE_dictcomp = 172
    RULE_arguments = 173
    RULE_args = 174
    RULE_arg = 175
    RULE_kwargs = 176
    RULE_starred_expression = 177
    RULE_kwarg_or_starred = 178
    RULE_kwarg_or_double_starred = 179
    RULE_star_targets = 180
    RULE_star_targets_list_seq = 181
    RULE_star_targets_tuple_seq = 182
    RULE_star_target = 183
    RULE_target_with_star_atom = 184
    RULE_star_atom = 185
    RULE_single_target = 186
    RULE_single_subscript_attribute_target = 187
    RULE_t_primary = 188
    RULE_del_targets = 189
    RULE_del_target = 190
    RULE_del_t_atom = 191
    RULE_type_expressions = 192
    RULE_func_type_comment = 193
    RULE_soft_kw_type = 194
    RULE_soft_kw_match = 195
    RULE_soft_kw_case = 196
    RULE_soft_kw_wildcard = 197
    RULE_soft_kw__not__wildcard = 198

    ruleNames =  [ "file_input", "interactive", "eval", "func_type", "fstring_input", 
                   "statements", "statement", "statement_newline", "simple_stmts", 
                   "simple_stmt", "compound_stmt", "assignment", "annotated_rhs", 
                   "augassign", "return_stmt", "raise_stmt", "global_stmt", 
                   "nonlocal_stmt", "del_stmt", "yield_stmt", "assert_stmt", 
                   "import_stmt", "import_name", "import_from", "import_from_targets", 
                   "import_from_as_names", "import_from_as_name", "dotted_as_names", 
                   "dotted_as_name", "dotted_name", "block", "decorators", 
                   "class_def", "class_def_raw", "function_def", "function_def_raw", 
                   "params", "parameters", "slash_no_default", "slash_with_default", 
                   "star_etc", "kwds", "param_no_default", "param_no_default_star_annotation", 
                   "param_with_default", "param_maybe_default", "param", 
                   "param_star_annotation", "annotation", "star_annotation", 
                   "default_assignment", "if_stmt", "elif_stmt", "else_block", 
                   "while_stmt", "for_stmt", "with_stmt", "with_item", "try_stmt", 
                   "except_block", "except_star_block", "finally_block", 
                   "match_stmt", "subject_expr", "case_block", "guard", 
                   "patterns", "pattern", "as_pattern", "or_pattern", "closed_pattern", 
                   "literal_pattern", "literal_expr", "complex_number", 
                   "signed_number", "signed_real_number", "real_number", 
                   "imaginary_number", "capture_pattern", "pattern_capture_target", 
                   "wildcard_pattern", "value_pattern", "attr", "name_or_attr", 
                   "group_pattern", "sequence_pattern", "open_sequence_pattern", 
                   "maybe_sequence_pattern", "maybe_star_pattern", "star_pattern", 
                   "mapping_pattern", "items_pattern", "key_value_pattern", 
                   "double_star_pattern", "class_pattern", "positional_patterns", 
                   "keyword_patterns", "keyword_pattern", "type_alias", 
                   "type_params", "type_param_seq", "type_param", "type_param_bound", 
                   "expressions", "expression", "yield_expr", "star_expressions", 
                   "star_expression", "star_named_expressions", "star_named_expression", 
                   "assignment_expression", "named_expression", "disjunction", 
                   "conjunction", "inversion", "comparison", "compare_op_bitwise_or_pair", 
                   "eq_bitwise_or", "noteq_bitwise_or", "lte_bitwise_or", 
                   "lt_bitwise_or", "gte_bitwise_or", "gt_bitwise_or", "notin_bitwise_or", 
                   "in_bitwise_or", "isnot_bitwise_or", "is_bitwise_or", 
                   "bitwise_or", "bitwise_xor", "bitwise_and", "shift_expr", 
                   "sum", "term", "factor", "power", "await_primary", "primary", 
                   "slices", "slice", "atom", "group", "lambdef", "lambda_params", 
                   "lambda_parameters", "lambda_slash_no_default", "lambda_slash_with_default", 
                   "lambda_star_etc", "lambda_kwds", "lambda_param_no_default", 
                   "lambda_param_with_default", "lambda_param_maybe_default", 
                   "lambda_param", "fstring_middle", "fstring_replacement_field", 
                   "fstring_conversion", "fstring_full_format_spec", "fstring_format_spec", 
                   "fstring", "string", "strings", "list", "tuple", "set", 
                   "dict", "double_starred_kvpairs", "double_starred_kvpair", 
                   "kvpair", "for_if_clauses", "for_if_clause", "listcomp", 
                   "setcomp", "genexp", "dictcomp", "arguments", "args", 
                   "arg", "kwargs", "starred_expression", "kwarg_or_starred", 
                   "kwarg_or_double_starred", "star_targets", "star_targets_list_seq", 
                   "star_targets_tuple_seq", "star_target", "target_with_star_atom", 
                   "star_atom", "single_target", "single_subscript_attribute_target", 
                   "t_primary", "del_targets", "del_target", "del_t_atom", 
                   "type_expressions", "func_type_comment", "soft_kw_type", 
                   "soft_kw_match", "soft_kw_case", "soft_kw_wildcard", 
                   "soft_kw__not__wildcard" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    TYPE_COMMENT=3
    FSTRING_START=4
    FSTRING_MIDDLE=5
    FSTRING_END=6
    FALSE=7
    AWAIT=8
    ELSE=9
    IMPORT=10
    PASS=11
    NONE=12
    BREAK=13
    EXCEPT=14
    IN=15
    RAISE=16
    TRUE=17
    CLASS=18
    FINALLY=19
    IS=20
    RETURN=21
    AND=22
    CONTINUE=23
    FOR=24
    LAMBDA=25
    TRY=26
    AS=27
    DEF=28
    FROM=29
    NONLOCAL=30
    WHILE=31
    ASSERT=32
    DEL=33
    GLOBAL=34
    NOT=35
    WITH=36
    ASYNC=37
    ELIF=38
    IF=39
    OR=40
    YIELD=41
    LPAR=42
    LSQB=43
    LBRACE=44
    RPAR=45
    RSQB=46
    RBRACE=47
    DOT=48
    COLON=49
    COMMA=50
    SEMI=51
    PLUS=52
    MINUS=53
    STAR=54
    SLASH=55
    VBAR=56
    AMPER=57
    LESS=58
    GREATER=59
    EQUAL=60
    PERCENT=61
    EQEQUAL=62
    NOTEQUAL=63
    LESSEQUAL=64
    GREATEREQUAL=65
    TILDE=66
    CIRCUMFLEX=67
    LEFTSHIFT=68
    RIGHTSHIFT=69
    DOUBLESTAR=70
    PLUSEQUAL=71
    MINEQUAL=72
    STAREQUAL=73
    SLASHEQUAL=74
    PERCENTEQUAL=75
    AMPEREQUAL=76
    VBAREQUAL=77
    CIRCUMFLEXEQUAL=78
    LEFTSHIFTEQUAL=79
    RIGHTSHIFTEQUAL=80
    DOUBLESTAREQUAL=81
    DOUBLESLASH=82
    DOUBLESLASHEQUAL=83
    AT=84
    ATEQUAL=85
    RARROW=86
    ELLIPSIS=87
    COLONEQUAL=88
    EXCLAMATION=89
    NAME=90
    NUMBER=91
    STRING=92
    NEWLINE=93
    COMMENT=94
    WS=95
    EXPLICIT_LINE_JOINING=96
    ERRORTOKEN=97

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def statements(self):
            return self.getTypedRuleContext(PythonParser.StatementsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_file_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = PythonParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 398
                self.statements()


            self.state = 401
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InteractiveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement_newline(self):
            return self.getTypedRuleContext(PythonParser.Statement_newlineContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_interactive

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteractive" ):
                return visitor.visitInteractive(self)
            else:
                return visitor.visitChildren(self)




    def interactive(self):

        localctx = PythonParser.InteractiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_interactive)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.statement_newline()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressions(self):
            return self.getTypedRuleContext(PythonParser.ExpressionsContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_eval

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval" ):
                return visitor.visitEval(self)
            else:
                return visitor.visitChildren(self)




    def eval_(self):

        localctx = PythonParser.EvalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_eval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self.expressions()
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 406
                self.match(PythonParser.NEWLINE)
                self.state = 411
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 412
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def RARROW(self):
            return self.getToken(PythonParser.RARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def type_expressions(self):
            return self.getTypedRuleContext(PythonParser.Type_expressionsContext,0)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_func_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_type" ):
                return visitor.visitFunc_type(self)
            else:
                return visitor.visitChildren(self)




    def func_type(self):

        localctx = PythonParser.Func_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_func_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(PythonParser.LPAR)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537681) != 0):
                self.state = 415
                self.type_expressions()


            self.state = 418
            self.match(PythonParser.RPAR)
            self.state = 419
            self.match(PythonParser.RARROW)
            self.state = 420
            self.expression()
            self.state = 424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 421
                self.match(PythonParser.NEWLINE)
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 427
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_input

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_input" ):
                return visitor.visitFstring_input(self)
            else:
                return visitor.visitChildren(self)




    def fstring_input(self):

        localctx = PythonParser.Fstring_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fstring_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.star_expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StatementContext)
            else:
                return self.getTypedRuleContext(PythonParser.StatementContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_statements

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = PythonParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 431
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 434 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_statement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = PythonParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_statement)
        try:
            self.state = 438
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.compound_stmt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 437
                self.simple_stmts()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Statement_newlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_statement_newline

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement_newline" ):
                return visitor.visitStatement_newline(self)
            else:
                return visitor.visitChildren(self)




    def statement_newline(self):

        localctx = PythonParser.Statement_newlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_statement_newline)
        try:
            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.compound_stmt()
                self.state = 441
                self.match(PythonParser.NEWLINE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.simple_stmts()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 444
                self.match(PythonParser.NEWLINE)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 445
                self.match(PythonParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Simple_stmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.Simple_stmtContext,i)


        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.SEMI)
            else:
                return self.getToken(PythonParser.SEMI, i)

        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmts

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmts" ):
                return visitor.visitSimple_stmts(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmts(self):

        localctx = PythonParser.Simple_stmtsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_simple_stmts)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.simple_stmt()
            self.state = 453
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 449
                    self.match(PythonParser.SEMI)
                    self.state = 450
                    self.simple_stmt() 
                self.state = 455
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==51:
                self.state = 456
                self.match(PythonParser.SEMI)


            self.state = 459
            self.match(PythonParser.NEWLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment(self):
            return self.getTypedRuleContext(PythonParser.AssignmentContext,0)


        def type_alias(self):
            return self.getTypedRuleContext(PythonParser.Type_aliasContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def return_stmt(self):
            return self.getTypedRuleContext(PythonParser.Return_stmtContext,0)


        def import_stmt(self):
            return self.getTypedRuleContext(PythonParser.Import_stmtContext,0)


        def raise_stmt(self):
            return self.getTypedRuleContext(PythonParser.Raise_stmtContext,0)


        def PASS(self):
            return self.getToken(PythonParser.PASS, 0)

        def del_stmt(self):
            return self.getTypedRuleContext(PythonParser.Del_stmtContext,0)


        def yield_stmt(self):
            return self.getTypedRuleContext(PythonParser.Yield_stmtContext,0)


        def assert_stmt(self):
            return self.getTypedRuleContext(PythonParser.Assert_stmtContext,0)


        def BREAK(self):
            return self.getToken(PythonParser.BREAK, 0)

        def CONTINUE(self):
            return self.getToken(PythonParser.CONTINUE, 0)

        def global_stmt(self):
            return self.getTypedRuleContext(PythonParser.Global_stmtContext,0)


        def nonlocal_stmt(self):
            return self.getTypedRuleContext(PythonParser.Nonlocal_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = PythonParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_simple_stmt)
        try:
            self.state = 475
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.assignment()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.type_alias()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.star_expressions()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 464
                self.return_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 465
                self.import_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 466
                self.raise_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 467
                self.match(PythonParser.PASS)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 468
                self.del_stmt()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 469
                self.yield_stmt()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 470
                self.assert_stmt()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 471
                self.match(PythonParser.BREAK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 472
                self.match(PythonParser.CONTINUE)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 473
                self.global_stmt()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 474
                self.nonlocal_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def function_def(self):
            return self.getTypedRuleContext(PythonParser.Function_defContext,0)


        def if_stmt(self):
            return self.getTypedRuleContext(PythonParser.If_stmtContext,0)


        def class_def(self):
            return self.getTypedRuleContext(PythonParser.Class_defContext,0)


        def with_stmt(self):
            return self.getTypedRuleContext(PythonParser.With_stmtContext,0)


        def for_stmt(self):
            return self.getTypedRuleContext(PythonParser.For_stmtContext,0)


        def try_stmt(self):
            return self.getTypedRuleContext(PythonParser.Try_stmtContext,0)


        def while_stmt(self):
            return self.getTypedRuleContext(PythonParser.While_stmtContext,0)


        def match_stmt(self):
            return self.getTypedRuleContext(PythonParser.Match_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_compound_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_stmt" ):
                return visitor.visitCompound_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_stmt(self):

        localctx = PythonParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_compound_stmt)
        try:
            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.function_def()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.if_stmt()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.class_def()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 480
                self.with_stmt()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 481
                self.for_stmt()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 482
                self.try_stmt()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 483
                self.while_stmt()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 484
                self.match_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.EQUAL)
            else:
                return self.getToken(PythonParser.EQUAL, i)

        def annotated_rhs(self):
            return self.getTypedRuleContext(PythonParser.Annotated_rhsContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def single_target(self):
            return self.getTypedRuleContext(PythonParser.Single_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(PythonParser.Single_subscript_attribute_targetContext,0)


        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def star_targets(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetsContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetsContext,i)


        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def augassign(self):
            return self.getTypedRuleContext(PythonParser.AugassignContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment" ):
                return visitor.visitAssignment(self)
            else:
                return visitor.visitChildren(self)




    def assignment(self):

        localctx = PythonParser.AssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_assignment)
        self._la = 0 # Token type
        try:
            self.state = 527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 487
                self.match(PythonParser.NAME)
                self.state = 488
                self.match(PythonParser.COLON)
                self.state = 489
                self.expression()
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 490
                    self.match(PythonParser.EQUAL)
                    self.state = 491
                    self.annotated_rhs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 494
                    self.match(PythonParser.LPAR)
                    self.state = 495
                    self.single_target()
                    self.state = 496
                    self.match(PythonParser.RPAR)
                    pass

                elif la_ == 2:
                    self.state = 498
                    self.single_subscript_attribute_target()
                    pass


                self.state = 501
                self.match(PythonParser.COLON)
                self.state = 502
                self.expression()
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 503
                    self.match(PythonParser.EQUAL)
                    self.state = 504
                    self.annotated_rhs()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 510 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 507
                        self.star_targets()
                        self.state = 508
                        self.match(PythonParser.EQUAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 512 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

                self.state = 516
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [41]:
                    self.state = 514
                    self.yield_expr()
                    pass
                elif token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 54, 66, 87, 90, 91, 92]:
                    self.state = 515
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==3:
                    self.state = 518
                    self.match(PythonParser.TYPE_COMMENT)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 521
                self.single_target()
                self.state = 522
                self.augassign()
                self.state = 525
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [41]:
                    self.state = 523
                    self.yield_expr()
                    pass
                elif token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 54, 66, 87, 90, 91, 92]:
                    self.state = 524
                    self.star_expressions()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Annotated_rhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_annotated_rhs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotated_rhs" ):
                return visitor.visitAnnotated_rhs(self)
            else:
                return visitor.visitChildren(self)




    def annotated_rhs(self):

        localctx = PythonParser.Annotated_rhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_annotated_rhs)
        try:
            self.state = 531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.yield_expr()
                pass
            elif token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 54, 66, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AugassignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUSEQUAL(self):
            return self.getToken(PythonParser.PLUSEQUAL, 0)

        def MINEQUAL(self):
            return self.getToken(PythonParser.MINEQUAL, 0)

        def STAREQUAL(self):
            return self.getToken(PythonParser.STAREQUAL, 0)

        def ATEQUAL(self):
            return self.getToken(PythonParser.ATEQUAL, 0)

        def SLASHEQUAL(self):
            return self.getToken(PythonParser.SLASHEQUAL, 0)

        def PERCENTEQUAL(self):
            return self.getToken(PythonParser.PERCENTEQUAL, 0)

        def AMPEREQUAL(self):
            return self.getToken(PythonParser.AMPEREQUAL, 0)

        def VBAREQUAL(self):
            return self.getToken(PythonParser.VBAREQUAL, 0)

        def CIRCUMFLEXEQUAL(self):
            return self.getToken(PythonParser.CIRCUMFLEXEQUAL, 0)

        def LEFTSHIFTEQUAL(self):
            return self.getToken(PythonParser.LEFTSHIFTEQUAL, 0)

        def RIGHTSHIFTEQUAL(self):
            return self.getToken(PythonParser.RIGHTSHIFTEQUAL, 0)

        def DOUBLESTAREQUAL(self):
            return self.getToken(PythonParser.DOUBLESTAREQUAL, 0)

        def DOUBLESLASHEQUAL(self):
            return self.getToken(PythonParser.DOUBLESLASHEQUAL, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_augassign

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAugassign" ):
                return visitor.visitAugassign(self)
            else:
                return visitor.visitChildren(self)




    def augassign(self):

        localctx = PythonParser.AugassignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_augassign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 22527) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Return_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(PythonParser.RETURN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_return_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)




    def return_stmt(self):

        localctx = PythonParser.Return_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_return_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 535
            self.match(PythonParser.RETURN)
            self.state = 537
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                self.state = 536
                self.star_expressions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Raise_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(PythonParser.RAISE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_raise_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)




    def raise_stmt(self):

        localctx = PythonParser.Raise_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_raise_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            self.match(PythonParser.RAISE)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13541619601117584) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                self.state = 540
                self.expression()
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 541
                    self.match(PythonParser.FROM)
                    self.state = 542
                    self.expression()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Global_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(PythonParser.GLOBAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_global_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def global_stmt(self):

        localctx = PythonParser.Global_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_global_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self.match(PythonParser.GLOBAL)
            self.state = 548
            self.match(PythonParser.NAME)
            self.state = 553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 549
                self.match(PythonParser.COMMA)
                self.state = 550
                self.match(PythonParser.NAME)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nonlocal_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NONLOCAL(self):
            return self.getToken(PythonParser.NONLOCAL, 0)

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_nonlocal_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)




    def nonlocal_stmt(self):

        localctx = PythonParser.Nonlocal_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_nonlocal_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(PythonParser.NONLOCAL)
            self.state = 557
            self.match(PythonParser.NAME)
            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 558
                self.match(PythonParser.COMMA)
                self.state = 559
                self.match(PythonParser.NAME)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEL(self):
            return self.getToken(PythonParser.DEL, 0)

        def del_targets(self):
            return self.getTypedRuleContext(PythonParser.Del_targetsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_del_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)




    def del_stmt(self):

        localctx = PythonParser.Del_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_del_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(PythonParser.DEL)
            self.state = 566
            self.del_targets()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)




    def yield_stmt(self):

        localctx = PythonParser.Yield_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_yield_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.yield_expr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(PythonParser.ASSERT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_assert_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def assert_stmt(self):

        localctx = PythonParser.Assert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_assert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(PythonParser.ASSERT)
            self.state = 571
            self.expression()
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 572
                self.match(PythonParser.COMMA)
                self.state = 573
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_name(self):
            return self.getTypedRuleContext(PythonParser.Import_nameContext,0)


        def import_from(self):
            return self.getTypedRuleContext(PythonParser.Import_fromContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_import_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)




    def import_stmt(self):

        localctx = PythonParser.Import_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_import_stmt)
        try:
            self.state = 578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.import_name()
                pass
            elif token in [29]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.import_from()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)

        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonParser.Dotted_as_namesContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_import_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_name" ):
                return visitor.visitImport_name(self)
            else:
                return visitor.visitChildren(self)




    def import_name(self):

        localctx = PythonParser.Import_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_import_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(PythonParser.IMPORT)
            self.state = 581
            self.dotted_as_names()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_fromContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)

        def import_from_targets(self):
            return self.getTypedRuleContext(PythonParser.Import_from_targetsContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ELLIPSIS)
            else:
                return self.getToken(PythonParser.ELLIPSIS, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from" ):
                return visitor.visitImport_from(self)
            else:
                return visitor.visitChildren(self)




    def import_from(self):

        localctx = PythonParser.Import_fromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_import_from)
        self._la = 0 # Token type
        try:
            self.state = 602
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.match(PythonParser.FROM)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==48 or _la==87:
                    self.state = 584
                    _la = self._input.LA(1)
                    if not(_la==48 or _la==87):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 590
                self.dotted_name(0)
                self.state = 591
                self.match(PythonParser.IMPORT)
                self.state = 592
                self.import_from_targets()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 594
                self.match(PythonParser.FROM)
                self.state = 596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 595
                    _la = self._input.LA(1)
                    if not(_la==48 or _la==87):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==48 or _la==87):
                        break

                self.state = 600
                self.match(PythonParser.IMPORT)
                self.state = 601
                self.import_from_targets()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def import_from_as_names(self):
            return self.getTypedRuleContext(PythonParser.Import_from_as_namesContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_targets" ):
                return visitor.visitImport_from_targets(self)
            else:
                return visitor.visitChildren(self)




    def import_from_targets(self):

        localctx = PythonParser.Import_from_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_import_from_targets)
        self._la = 0 # Token type
        try:
            self.state = 613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self.match(PythonParser.LPAR)
                self.state = 605
                self.import_from_as_names()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 606
                    self.match(PythonParser.COMMA)


                self.state = 609
                self.match(PythonParser.RPAR)
                pass
            elif token in [90]:
                self.enterOuterAlt(localctx, 2)
                self.state = 611
                self.import_from_as_names()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 3)
                self.state = 612
                self.match(PythonParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_from_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Import_from_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Import_from_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_as_names

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_as_names" ):
                return visitor.visitImport_from_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_from_as_names(self):

        localctx = PythonParser.Import_from_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_import_from_as_names)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.import_from_as_name()
            self.state = 620
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 616
                    self.match(PythonParser.COMMA)
                    self.state = 617
                    self.import_from_as_name() 
                self.state = 622
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_from_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_from_as_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_from_as_name" ):
                return visitor.visitImport_from_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_from_as_name(self):

        localctx = PythonParser.Import_from_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_import_from_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(PythonParser.NAME)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 624
                self.match(PythonParser.AS)
                self.state = 625
                self.match(PythonParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_names

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = PythonParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self.dotted_as_name()
            self.state = 633
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==50:
                self.state = 629
                self.match(PythonParser.COMMA)
                self.state = 630
                self.dotted_as_name()
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = PythonParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.dotted_name(0)
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 637
                self.match(PythonParser.AS)
                self.state = 638
                self.match(PythonParser.NAME)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_name

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 58
        self.enterRecursionRule(localctx, 58, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(PythonParser.NAME)
            self._ctx.stop = self._input.LT(-1)
            self.state = 649
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 644
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 645
                    self.match(PythonParser.DOT)
                    self.state = 646
                    self.match(PythonParser.NAME) 
                self.state = 651
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def statements(self):
            return self.getTypedRuleContext(PythonParser.StatementsContext,0)


        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def simple_stmts(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = PythonParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_block)
        try:
            self.state = 658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 652
                self.match(PythonParser.NEWLINE)
                self.state = 653
                self.match(PythonParser.INDENT)
                self.state = 654
                self.statements()
                self.state = 655
                self.match(PythonParser.DEDENT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.simple_stmts()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.AT)
            else:
                return self.getToken(PythonParser.AT, i)

        def named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Named_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Named_expressionContext,i)


        def NEWLINE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NEWLINE)
            else:
                return self.getToken(PythonParser.NEWLINE, i)

        def getRuleIndex(self):
            return PythonParser.RULE_decorators

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorators" ):
                return visitor.visitDecorators(self)
            else:
                return visitor.visitChildren(self)




    def decorators(self):

        localctx = PythonParser.DecoratorsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_decorators)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 660
                self.match(PythonParser.AT)
                self.state = 661
                self.named_expression()
                self.state = 662
                self.match(PythonParser.NEWLINE)
                self.state = 666 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==84):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonParser.DecoratorsContext,0)


        def class_def_raw(self):
            return self.getTypedRuleContext(PythonParser.Class_def_rawContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_class_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def" ):
                return visitor.visitClass_def(self)
            else:
                return visitor.visitChildren(self)




    def class_def(self):

        localctx = PythonParser.Class_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_class_def)
        try:
            self.state = 672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.decorators()
                self.state = 669
                self.class_def_raw()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 2)
                self.state = 671
                self.class_def_raw()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_def_rawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonParser.CLASS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_class_def_raw

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_def_raw" ):
                return visitor.visitClass_def_raw(self)
            else:
                return visitor.visitChildren(self)




    def class_def_raw(self):

        localctx = PythonParser.Class_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_class_def_raw)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(PythonParser.CLASS)
            self.state = 675
            self.match(PythonParser.NAME)
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 676
                self.type_params()


            self.state = 684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 679
                self.match(PythonParser.LPAR)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537681) != 0):
                    self.state = 680
                    self.arguments()


                self.state = 683
                self.match(PythonParser.RPAR)


            self.state = 686
            self.match(PythonParser.COLON)
            self.state = 687
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decorators(self):
            return self.getTypedRuleContext(PythonParser.DecoratorsContext,0)


        def function_def_raw(self):
            return self.getTypedRuleContext(PythonParser.Function_def_rawContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_function_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_def" ):
                return visitor.visitFunction_def(self)
            else:
                return visitor.visitChildren(self)




    def function_def(self):

        localctx = PythonParser.Function_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_function_def)
        try:
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [84]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.decorators()
                self.state = 690
                self.function_def_raw()
                pass
            elif token in [28, 37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                self.function_def_raw()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_def_rawContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonParser.DEF, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def params(self):
            return self.getTypedRuleContext(PythonParser.ParamsContext,0)


        def RARROW(self):
            return self.getToken(PythonParser.RARROW, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def func_type_comment(self):
            return self.getTypedRuleContext(PythonParser.Func_type_commentContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_function_def_raw

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_def_raw" ):
                return visitor.visitFunction_def_raw(self)
            else:
                return visitor.visitChildren(self)




    def function_def_raw(self):

        localctx = PythonParser.Function_def_rawContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_function_def_raw)
        self._la = 0 # Token type
        try:
            self.state = 734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [28]:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.match(PythonParser.DEF)
                self.state = 696
                self.match(PythonParser.NAME)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 697
                    self.type_params()


                self.state = 700
                self.match(PythonParser.LPAR)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 68719542273) != 0):
                    self.state = 701
                    self.params()


                self.state = 704
                self.match(PythonParser.RPAR)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 705
                    self.match(PythonParser.RARROW)
                    self.state = 706
                    self.expression()


                self.state = 709
                self.match(PythonParser.COLON)
                self.state = 711
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
                if la_ == 1:
                    self.state = 710
                    self.func_type_comment()


                self.state = 713
                self.block()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 2)
                self.state = 714
                self.match(PythonParser.ASYNC)
                self.state = 715
                self.match(PythonParser.DEF)
                self.state = 716
                self.match(PythonParser.NAME)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==43:
                    self.state = 717
                    self.type_params()


                self.state = 720
                self.match(PythonParser.LPAR)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 68719542273) != 0):
                    self.state = 721
                    self.params()


                self.state = 724
                self.match(PythonParser.RPAR)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 725
                    self.match(PythonParser.RARROW)
                    self.state = 726
                    self.expression()


                self.state = 729
                self.match(PythonParser.COLON)
                self.state = 731
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 730
                    self.func_type_comment()


                self.state = 733
                self.block()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameters(self):
            return self.getTypedRuleContext(PythonParser.ParametersContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParams" ):
                return visitor.visitParams(self)
            else:
                return visitor.visitChildren(self)




    def params(self):

        localctx = PythonParser.ParamsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 736
            self.parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slash_no_default(self):
            return self.getTypedRuleContext(PythonParser.Slash_no_defaultContext,0)


        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_with_defaultContext,i)


        def star_etc(self):
            return self.getTypedRuleContext(PythonParser.Star_etcContext,0)


        def slash_with_default(self):
            return self.getTypedRuleContext(PythonParser.Slash_with_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameters" ):
                return visitor.visitParameters(self)
            else:
                return visitor.visitChildren(self)




    def parameters(self):

        localctx = PythonParser.ParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_parameters)
        self._la = 0 # Token type
        try:
            self.state = 787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.slash_no_default()
                self.state = 742
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 739
                        self.param_no_default() 
                    self.state = 744
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 745
                    self.param_with_default()
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==70:
                    self.state = 751
                    self.star_etc()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.slash_with_default()
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 755
                    self.param_with_default()
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==70:
                    self.state = 761
                    self.star_etc()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 765 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 764
                        self.param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 767 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 769
                    self.param_with_default()
                    self.state = 774
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==70:
                    self.state = 775
                    self.star_etc()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 779 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 778
                    self.param_with_default()
                    self.state = 781 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==90):
                        break

                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==70:
                    self.state = 783
                    self.star_etc()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 786
                self.star_etc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slash_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_slash_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlash_no_default" ):
                return visitor.visitSlash_no_default(self)
            else:
                return visitor.visitChildren(self)




    def slash_no_default(self):

        localctx = PythonParser.Slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_slash_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 789
                self.param_no_default()
                self.state = 792 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==90):
                    break

            self.state = 794
            self.match(PythonParser.SLASH)
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 795
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Slash_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,i)


        def param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_with_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_slash_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlash_with_default" ):
                return visitor.visitSlash_with_default(self)
            else:
                return visitor.visitChildren(self)




    def slash_with_default(self):

        localctx = PythonParser.Slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_slash_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 798
                    self.param_no_default() 
                self.state = 803
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

            self.state = 805 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 804
                self.param_with_default()
                self.state = 807 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==90):
                    break

            self.state = 809
            self.match(PythonParser.SLASH)
            self.state = 811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 810
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_etcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,0)


        def param_maybe_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Param_maybe_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Param_maybe_defaultContext,i)


        def kwds(self):
            return self.getTypedRuleContext(PythonParser.KwdsContext,0)


        def param_no_default_star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Param_no_default_star_annotationContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_star_etc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_etc" ):
                return visitor.visitStar_etc(self)
            else:
                return visitor.visitChildren(self)




    def star_etc(self):

        localctx = PythonParser.Star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_star_etc)
        self._la = 0 # Token type
        try:
            self.state = 846
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 813
                self.match(PythonParser.STAR)
                self.state = 814
                self.param_no_default()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 815
                    self.param_maybe_default()
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 821
                    self.kwds()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 824
                self.match(PythonParser.STAR)
                self.state = 825
                self.param_no_default_star_annotation()
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 826
                    self.param_maybe_default()
                    self.state = 831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 832
                    self.kwds()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.match(PythonParser.STAR)
                self.state = 836
                self.match(PythonParser.COMMA)
                self.state = 838 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 837
                    self.param_maybe_default()
                    self.state = 840 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==90):
                        break

                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 842
                    self.kwds()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 845
                self.kwds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Param_no_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwds

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwds" ):
                return visitor.visitKwds(self)
            else:
                return visitor.visitChildren(self)




    def kwds(self):

        localctx = PythonParser.KwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(PythonParser.DOUBLESTAR)
            self.state = 849
            self.param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_no_default" ):
                return visitor.visitParam_no_default(self)
            else:
                return visitor.visitChildren(self)




    def param_no_default(self):

        localctx = PythonParser.Param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_param_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.param()
            self.state = 853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 852
                self.match(PythonParser.COMMA)


            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 855
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_no_default_star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param_star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Param_star_annotationContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_no_default_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_no_default_star_annotation" ):
                return visitor.visitParam_no_default_star_annotation(self)
            else:
                return visitor.visitChildren(self)




    def param_no_default_star_annotation(self):

        localctx = PythonParser.Param_no_default_star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_param_no_default_star_annotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.param_star_annotation()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 859
                self.match(PythonParser.COMMA)


            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 862
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_with_default" ):
                return visitor.visitParam_with_default(self)
            else:
                return visitor.visitChildren(self)




    def param_with_default(self):

        localctx = PythonParser.Param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_param_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.param()
            self.state = 866
            self.default_assignment()
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 867
                self.match(PythonParser.COMMA)


            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 870
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_maybe_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def param(self):
            return self.getTypedRuleContext(PythonParser.ParamContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_param_maybe_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_maybe_default" ):
                return visitor.visitParam_maybe_default(self)
            else:
                return visitor.visitChildren(self)




    def param_maybe_default(self):

        localctx = PythonParser.Param_maybe_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_param_maybe_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.param()
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 874
                self.default_assignment()


            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 877
                self.match(PythonParser.COMMA)


            self.state = 881
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==3:
                self.state = 880
                self.match(PythonParser.TYPE_COMMENT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParamContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def annotation(self):
            return self.getTypedRuleContext(PythonParser.AnnotationContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam" ):
                return visitor.visitParam(self)
            else:
                return visitor.visitChildren(self)




    def param(self):

        localctx = PythonParser.ParamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_param)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(PythonParser.NAME)
            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 884
                self.annotation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Param_star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def star_annotation(self):
            return self.getTypedRuleContext(PythonParser.Star_annotationContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_param_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParam_star_annotation" ):
                return visitor.visitParam_star_annotation(self)
            else:
                return visitor.visitChildren(self)




    def param_star_annotation(self):

        localctx = PythonParser.Param_star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_param_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(PythonParser.NAME)
            self.state = 888
            self.star_annotation()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = PythonParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(PythonParser.COLON)
            self.state = 891
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def star_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_annotation

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_annotation" ):
                return visitor.visitStar_annotation(self)
            else:
                return visitor.visitChildren(self)




    def star_annotation(self):

        localctx = PythonParser.Star_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_star_annotation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(PythonParser.COLON)
            self.state = 894
            self.star_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_assignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_default_assignment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_assignment" ):
                return visitor.visitDefault_assignment(self)
            else:
                return visitor.visitChildren(self)




    def default_assignment(self):

        localctx = PythonParser.Default_assignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_default_assignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.match(PythonParser.EQUAL)
            self.state = 897
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class If_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def elif_stmt(self):
            return self.getTypedRuleContext(PythonParser.Elif_stmtContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_if_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)




    def if_stmt(self):

        localctx = PythonParser.If_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_if_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(PythonParser.IF)
            self.state = 900
            self.named_expression()
            self.state = 901
            self.match(PythonParser.COLON)
            self.state = 902
            self.block()
            self.state = 907
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.state = 903
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.state = 905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 904
                    self.else_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(PythonParser.ELIF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def elif_stmt(self):
            return self.getTypedRuleContext(PythonParser.Elif_stmtContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_elif_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_stmt" ):
                return visitor.visitElif_stmt(self)
            else:
                return visitor.visitChildren(self)




    def elif_stmt(self):

        localctx = PythonParser.Elif_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_elif_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(PythonParser.ELIF)
            self.state = 910
            self.named_expression()
            self.state = 911
            self.match(PythonParser.COLON)
            self.state = 912
            self.block()
            self.state = 917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 913
                self.elif_stmt()
                pass

            elif la_ == 2:
                self.state = 915
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                if la_ == 1:
                    self.state = 914
                    self.else_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_else_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_block" ):
                return visitor.visitElse_block(self)
            else:
                return visitor.visitChildren(self)




    def else_block(self):

        localctx = PythonParser.Else_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_else_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 919
            self.match(PythonParser.ELSE)
            self.state = 920
            self.match(PythonParser.COLON)
            self.state = 921
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class While_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonParser.WHILE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_while_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)




    def while_stmt(self):

        localctx = PythonParser.While_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_while_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(PythonParser.WHILE)
            self.state = 924
            self.named_expression()
            self.state = 925
            self.match(PythonParser.COLON)
            self.state = 926
            self.block()
            self.state = 928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 927
                self.else_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(PythonParser.Star_targetsContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_for_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)




    def for_stmt(self):

        localctx = PythonParser.For_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_for_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 930
                self.match(PythonParser.ASYNC)


            self.state = 933
            self.match(PythonParser.FOR)
            self.state = 934
            self.star_targets()
            self.state = 935
            self.match(PythonParser.IN)
            self.state = 936
            self.star_expressions()
            self.state = 937
            self.match(PythonParser.COLON)
            self.state = 939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 938
                self.match(PythonParser.TYPE_COMMENT)


            self.state = 941
            self.block()
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 942
                self.else_block()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(PythonParser.WITH, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonParser.With_itemContext,i)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_with_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)




    def with_stmt(self):

        localctx = PythonParser.With_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_with_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 945
                self.match(PythonParser.ASYNC)


            self.state = 948
            self.match(PythonParser.WITH)
            self.state = 976
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
            if la_ == 1:
                self.state = 949
                self.match(PythonParser.LPAR)
                self.state = 950
                self.with_item()
                self.state = 955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 951
                        self.match(PythonParser.COMMA)
                        self.state = 952
                        self.with_item() 
                    self.state = 957
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 958
                    self.match(PythonParser.COMMA)


                self.state = 961
                self.match(PythonParser.RPAR)
                self.state = 962
                self.match(PythonParser.COLON)
                pass

            elif la_ == 2:
                self.state = 964
                self.with_item()
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==50:
                    self.state = 965
                    self.match(PythonParser.COMMA)
                    self.state = 966
                    self.with_item()
                    self.state = 971
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 972
                self.match(PythonParser.COLON)
                self.state = 974
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 973
                    self.match(PythonParser.TYPE_COMMENT)


                pass


            self.state = 978
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def star_target(self):
            return self.getTypedRuleContext(PythonParser.Star_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_with_item

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = PythonParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.expression()
            self.state = 983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 981
                self.match(PythonParser.AS)
                self.state = 982
                self.star_target()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Try_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PythonParser.TRY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def finally_block(self):
            return self.getTypedRuleContext(PythonParser.Finally_blockContext,0)


        def except_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_blockContext,i)


        def else_block(self):
            return self.getTypedRuleContext(PythonParser.Else_blockContext,0)


        def except_star_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_star_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_star_blockContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_try_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)




    def try_stmt(self):

        localctx = PythonParser.Try_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_try_stmt)
        try:
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.match(PythonParser.TRY)
                self.state = 986
                self.match(PythonParser.COLON)
                self.state = 987
                self.block()
                self.state = 988
                self.finally_block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.match(PythonParser.TRY)
                self.state = 991
                self.match(PythonParser.COLON)
                self.state = 992
                self.block()
                self.state = 994 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 993
                        self.except_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 996 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                self.state = 999
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 998
                    self.else_block()


                self.state = 1002
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 1001
                    self.finally_block()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1004
                self.match(PythonParser.TRY)
                self.state = 1005
                self.match(PythonParser.COLON)
                self.state = 1006
                self.block()
                self.state = 1008 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1007
                        self.except_star_block()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1010 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                self.state = 1013
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1012
                    self.else_block()


                self.state = 1016
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1015
                    self.finally_block()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_block" ):
                return visitor.visitExcept_block(self)
            else:
                return visitor.visitChildren(self)




    def except_block(self):

        localctx = PythonParser.Except_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_except_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(PythonParser.EXCEPT)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13541619601117584) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                self.state = 1021
                self.expression()
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 1022
                    self.match(PythonParser.AS)
                    self.state = 1023
                    self.match(PythonParser.NAME)




            self.state = 1028
            self.match(PythonParser.COLON)
            self.state = 1029
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_star_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_except_star_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_star_block" ):
                return visitor.visitExcept_star_block(self)
            else:
                return visitor.visitChildren(self)




    def except_star_block(self):

        localctx = PythonParser.Except_star_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_except_star_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(PythonParser.EXCEPT)
            self.state = 1032
            self.match(PythonParser.STAR)
            self.state = 1033
            self.expression()
            self.state = 1036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==27:
                self.state = 1034
                self.match(PythonParser.AS)
                self.state = 1035
                self.match(PythonParser.NAME)


            self.state = 1038
            self.match(PythonParser.COLON)
            self.state = 1039
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(PythonParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_finally_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_block" ):
                return visitor.visitFinally_block(self)
            else:
                return visitor.visitChildren(self)




    def finally_block(self):

        localctx = PythonParser.Finally_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_finally_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(PythonParser.FINALLY)
            self.state = 1042
            self.match(PythonParser.COLON)
            self.state = 1043
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Match_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_match(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_matchContext,0)


        def subject_expr(self):
            return self.getTypedRuleContext(PythonParser.Subject_exprContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def case_block(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Case_blockContext)
            else:
                return self.getTypedRuleContext(PythonParser.Case_blockContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_match_stmt

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMatch_stmt" ):
                return visitor.visitMatch_stmt(self)
            else:
                return visitor.visitChildren(self)




    def match_stmt(self):

        localctx = PythonParser.Match_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_match_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.soft_kw_match()
            self.state = 1046
            self.subject_expr()
            self.state = 1047
            self.match(PythonParser.COLON)
            self.state = 1048
            self.match(PythonParser.NEWLINE)
            self.state = 1049
            self.match(PythonParser.INDENT)
            self.state = 1051 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1050
                    self.case_block()

                else:
                    raise NoViableAltException(self)
                self.state = 1053 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,111,self._ctx)

            self.state = 1055
            self.match(PythonParser.DEDENT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Subject_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_subject_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubject_expr" ):
                return visitor.visitSubject_expr(self)
            else:
                return visitor.visitChildren(self)




    def subject_expr(self):

        localctx = PythonParser.Subject_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_subject_expr)
        self._la = 0 # Token type
        try:
            self.state = 1063
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1057
                self.star_named_expression()
                self.state = 1058
                self.match(PythonParser.COMMA)
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                    self.state = 1059
                    self.star_named_expressions()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1062
                self.named_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Case_blockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_case(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_caseContext,0)


        def patterns(self):
            return self.getTypedRuleContext(PythonParser.PatternsContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def block(self):
            return self.getTypedRuleContext(PythonParser.BlockContext,0)


        def guard(self):
            return self.getTypedRuleContext(PythonParser.GuardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_case_block

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCase_block" ):
                return visitor.visitCase_block(self)
            else:
                return visitor.visitChildren(self)




    def case_block(self):

        localctx = PythonParser.Case_blockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_case_block)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.soft_kw_case()
            self.state = 1066
            self.patterns()
            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==39:
                self.state = 1067
                self.guard()


            self.state = 1070
            self.match(PythonParser.COLON)
            self.state = 1071
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GuardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_guard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGuard" ):
                return visitor.visitGuard(self)
            else:
                return visitor.visitChildren(self)




    def guard(self):

        localctx = PythonParser.GuardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_guard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1073
            self.match(PythonParser.IF)
            self.state = 1074
            self.named_expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Open_sequence_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPatterns" ):
                return visitor.visitPatterns(self)
            else:
                return visitor.visitChildren(self)




    def patterns(self):

        localctx = PythonParser.PatternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_patterns)
        try:
            self.state = 1078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.open_sequence_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def as_pattern(self):
            return self.getTypedRuleContext(PythonParser.As_patternContext,0)


        def or_pattern(self):
            return self.getTypedRuleContext(PythonParser.Or_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = PythonParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_pattern)
        try:
            self.state = 1082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1080
                self.as_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1081
                self.or_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class As_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def or_pattern(self):
            return self.getTypedRuleContext(PythonParser.Or_patternContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_as_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAs_pattern" ):
                return visitor.visitAs_pattern(self)
            else:
                return visitor.visitChildren(self)




    def as_pattern(self):

        localctx = PythonParser.As_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_as_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1084
            self.or_pattern()
            self.state = 1085
            self.match(PythonParser.AS)
            self.state = 1086
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Or_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def closed_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Closed_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Closed_patternContext,i)


        def VBAR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.VBAR)
            else:
                return self.getToken(PythonParser.VBAR, i)

        def getRuleIndex(self):
            return PythonParser.RULE_or_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOr_pattern" ):
                return visitor.visitOr_pattern(self)
            else:
                return visitor.visitChildren(self)




    def or_pattern(self):

        localctx = PythonParser.Or_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_or_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.closed_pattern()
            self.state = 1093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==56:
                self.state = 1089
                self.match(PythonParser.VBAR)
                self.state = 1090
                self.closed_pattern()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closed_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_pattern(self):
            return self.getTypedRuleContext(PythonParser.Literal_patternContext,0)


        def capture_pattern(self):
            return self.getTypedRuleContext(PythonParser.Capture_patternContext,0)


        def wildcard_pattern(self):
            return self.getTypedRuleContext(PythonParser.Wildcard_patternContext,0)


        def value_pattern(self):
            return self.getTypedRuleContext(PythonParser.Value_patternContext,0)


        def group_pattern(self):
            return self.getTypedRuleContext(PythonParser.Group_patternContext,0)


        def sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Sequence_patternContext,0)


        def mapping_pattern(self):
            return self.getTypedRuleContext(PythonParser.Mapping_patternContext,0)


        def class_pattern(self):
            return self.getTypedRuleContext(PythonParser.Class_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_closed_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClosed_pattern" ):
                return visitor.visitClosed_pattern(self)
            else:
                return visitor.visitChildren(self)




    def closed_pattern(self):

        localctx = PythonParser.Closed_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_closed_pattern)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1096
                self.literal_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1097
                self.capture_pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1098
                self.wildcard_pattern()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1099
                self.value_pattern()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1100
                self.group_pattern()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1101
                self.sequence_pattern()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1102
                self.mapping_pattern()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1103
                self.class_pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PythonParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_literal_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_pattern" ):
                return visitor.visitLiteral_pattern(self)
            else:
                return visitor.visitChildren(self)




    def literal_pattern(self):

        localctx = PythonParser.Literal_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_literal_pattern)
        try:
            self.state = 1112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1108
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1109
                self.match(PythonParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1110
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1111
                self.match(PythonParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_numberContext,0)


        def complex_number(self):
            return self.getTypedRuleContext(PythonParser.Complex_numberContext,0)


        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_literal_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_expr" ):
                return visitor.visitLiteral_expr(self)
            else:
                return visitor.visitChildren(self)




    def literal_expr(self):

        localctx = PythonParser.Literal_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_literal_expr)
        try:
            self.state = 1120
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1114
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1115
                self.complex_number()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1116
                self.strings()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.match(PythonParser.NONE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1118
                self.match(PythonParser.TRUE)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1119
                self.match(PythonParser.FALSE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Complex_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_real_number(self):
            return self.getTypedRuleContext(PythonParser.Signed_real_numberContext,0)


        def imaginary_number(self):
            return self.getTypedRuleContext(PythonParser.Imaginary_numberContext,0)


        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_complex_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComplex_number" ):
                return visitor.visitComplex_number(self)
            else:
                return visitor.visitChildren(self)




    def complex_number(self):

        localctx = PythonParser.Complex_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_complex_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.signed_real_number()
            self.state = 1123
            _la = self._input.LA(1)
            if not(_la==52 or _la==53):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1124
            self.imaginary_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = PythonParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1126
                self.match(PythonParser.MINUS)


            self.state = 1129
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def real_number(self):
            return self.getTypedRuleContext(PythonParser.Real_numberContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_signed_real_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_real_number" ):
                return visitor.visitSigned_real_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_real_number(self):

        localctx = PythonParser.Signed_real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_signed_real_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 1131
                self.match(PythonParser.MINUS)


            self.state = 1134
            self.real_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Real_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_real_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReal_number" ):
                return visitor.visitReal_number(self)
            else:
                return visitor.visitChildren(self)




    def real_number(self):

        localctx = PythonParser.Real_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_real_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Imaginary_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_imaginary_number

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImaginary_number" ):
                return visitor.visitImaginary_number(self)
            else:
                return visitor.visitChildren(self)




    def imaginary_number(self):

        localctx = PythonParser.Imaginary_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_imaginary_number)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(PythonParser.NUMBER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Capture_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_capture_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture_pattern" ):
                return visitor.visitCapture_pattern(self)
            else:
                return visitor.visitChildren(self)




    def capture_pattern(self):

        localctx = PythonParser.Capture_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_capture_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pattern_capture_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw__not__wildcard(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw__not__wildcardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_pattern_capture_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern_capture_target" ):
                return visitor.visitPattern_capture_target(self)
            else:
                return visitor.visitChildren(self)




    def pattern_capture_target(self):

        localctx = PythonParser.Pattern_capture_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pattern_capture_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.soft_kw__not__wildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Wildcard_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_wildcard(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_wildcardContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_wildcard_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWildcard_pattern" ):
                return visitor.visitWildcard_pattern(self)
            else:
                return visitor.visitChildren(self)




    def wildcard_pattern(self):

        localctx = PythonParser.Wildcard_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_wildcard_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1144
            self.soft_kw_wildcard()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attr(self):
            return self.getTypedRuleContext(PythonParser.AttrContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_value_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue_pattern" ):
                return visitor.visitValue_pattern(self)
            else:
                return visitor.visitChildren(self)




    def value_pattern(self):

        localctx = PythonParser.Value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.attr()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def getRuleIndex(self):
            return PythonParser.RULE_attr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttr" ):
                return visitor.visitAttr(self)
            else:
                return visitor.visitChildren(self)




    def attr(self):

        localctx = PythonParser.AttrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1148
            self.match(PythonParser.NAME)
            self.state = 1151 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1149
                self.match(PythonParser.DOT)
                self.state = 1150
                self.match(PythonParser.NAME)
                self.state = 1153 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==48):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Name_or_attrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.NAME)
            else:
                return self.getToken(PythonParser.NAME, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)

        def getRuleIndex(self):
            return PythonParser.RULE_name_or_attr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName_or_attr" ):
                return visitor.visitName_or_attr(self)
            else:
                return visitor.visitChildren(self)




    def name_or_attr(self):

        localctx = PythonParser.Name_or_attrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_name_or_attr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1155
            self.match(PythonParser.NAME)
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==48:
                self.state = 1156
                self.match(PythonParser.DOT)
                self.state = 1157
                self.match(PythonParser.NAME)
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_group_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_pattern" ):
                return visitor.visitGroup_pattern(self)
            else:
                return visitor.visitChildren(self)




    def group_pattern(self):

        localctx = PythonParser.Group_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_group_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1163
            self.match(PythonParser.LPAR)
            self.state = 1164
            self.pattern()
            self.state = 1165
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_sequence_patternContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def open_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Open_sequence_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSequence_pattern" ):
                return visitor.visitSequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def sequence_pattern(self):

        localctx = PythonParser.Sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_sequence_pattern)
        try:
            self.state = 1177
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1167
                self.match(PythonParser.LSQB)
                self.state = 1169
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1168
                    self.maybe_sequence_pattern()


                self.state = 1171
                self.match(PythonParser.RSQB)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1172
                self.match(PythonParser.LPAR)
                self.state = 1174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
                if la_ == 1:
                    self.state = 1173
                    self.open_sequence_pattern()


                self.state = 1176
                self.match(PythonParser.RPAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Open_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_star_patternContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def maybe_sequence_pattern(self):
            return self.getTypedRuleContext(PythonParser.Maybe_sequence_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_open_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpen_sequence_pattern" ):
                return visitor.visitOpen_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def open_sequence_pattern(self):

        localctx = PythonParser.Open_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_open_sequence_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.maybe_star_pattern()
            self.state = 1180
            self.match(PythonParser.COMMA)
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1181
                self.maybe_sequence_pattern()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_sequence_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def maybe_star_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Maybe_star_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Maybe_star_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_maybe_sequence_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_sequence_pattern" ):
                return visitor.visitMaybe_sequence_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_sequence_pattern(self):

        localctx = PythonParser.Maybe_sequence_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_maybe_sequence_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1184
            self.maybe_star_pattern()
            self.state = 1189
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,129,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1185
                    self.match(PythonParser.COMMA)
                    self.state = 1186
                    self.maybe_star_pattern() 
                self.state = 1191
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,129,self._ctx)

            self.state = 1193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1192
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Maybe_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Star_patternContext,0)


        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_maybe_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMaybe_star_pattern" ):
                return visitor.visitMaybe_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def maybe_star_pattern(self):

        localctx = PythonParser.Maybe_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_maybe_star_pattern)
        try:
            self.state = 1197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1195
                self.star_pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.pattern()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_pattern" ):
                return visitor.visitStar_pattern(self)
            else:
                return visitor.visitChildren(self)




    def star_pattern(self):

        localctx = PythonParser.Star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(PythonParser.STAR)
            self.state = 1200
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def double_star_pattern(self):
            return self.getTypedRuleContext(PythonParser.Double_star_patternContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def items_pattern(self):
            return self.getTypedRuleContext(PythonParser.Items_patternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_mapping_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapping_pattern" ):
                return visitor.visitMapping_pattern(self)
            else:
                return visitor.visitChildren(self)




    def mapping_pattern(self):

        localctx = PythonParser.Mapping_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_mapping_pattern)
        self._la = 0 # Token type
        try:
            self.state = 1222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1202
                self.match(PythonParser.LBRACE)
                self.state = 1203
                self.match(PythonParser.RBRACE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1204
                self.match(PythonParser.LBRACE)
                self.state = 1205
                self.double_star_pattern()
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1206
                    self.match(PythonParser.COMMA)


                self.state = 1209
                self.match(PythonParser.RBRACE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1211
                self.match(PythonParser.LBRACE)
                self.state = 1212
                self.items_pattern()
                self.state = 1215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                if la_ == 1:
                    self.state = 1213
                    self.match(PythonParser.COMMA)
                    self.state = 1214
                    self.double_star_pattern()


                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1217
                    self.match(PythonParser.COMMA)


                self.state = 1220
                self.match(PythonParser.RBRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Items_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def key_value_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Key_value_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Key_value_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_items_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitItems_pattern" ):
                return visitor.visitItems_pattern(self)
            else:
                return visitor.visitChildren(self)




    def items_pattern(self):

        localctx = PythonParser.Items_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_items_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self.key_value_pattern()
            self.state = 1229
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,136,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1225
                    self.match(PythonParser.COMMA)
                    self.state = 1226
                    self.key_value_pattern() 
                self.state = 1231
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,136,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Key_value_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def literal_expr(self):
            return self.getTypedRuleContext(PythonParser.Literal_exprContext,0)


        def attr(self):
            return self.getTypedRuleContext(PythonParser.AttrContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_key_value_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKey_value_pattern" ):
                return visitor.visitKey_value_pattern(self)
            else:
                return visitor.visitChildren(self)




    def key_value_pattern(self):

        localctx = PythonParser.Key_value_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_key_value_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 7, 12, 17, 53, 91, 92]:
                self.state = 1232
                self.literal_expr()
                pass
            elif token in [90]:
                self.state = 1233
                self.attr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1236
            self.match(PythonParser.COLON)
            self.state = 1237
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_star_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def pattern_capture_target(self):
            return self.getTypedRuleContext(PythonParser.Pattern_capture_targetContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_double_star_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_star_pattern" ):
                return visitor.visitDouble_star_pattern(self)
            else:
                return visitor.visitChildren(self)




    def double_star_pattern(self):

        localctx = PythonParser.Double_star_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_double_star_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1239
            self.match(PythonParser.DOUBLESTAR)
            self.state = 1240
            self.pattern_capture_target()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name_or_attr(self):
            return self.getTypedRuleContext(PythonParser.Name_or_attrContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def positional_patterns(self):
            return self.getTypedRuleContext(PythonParser.Positional_patternsContext,0)


        def keyword_patterns(self):
            return self.getTypedRuleContext(PythonParser.Keyword_patternsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_class_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_pattern" ):
                return visitor.visitClass_pattern(self)
            else:
                return visitor.visitChildren(self)




    def class_pattern(self):

        localctx = PythonParser.Class_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_class_pattern)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.name_or_attr()
            self.state = 1243
            self.match(PythonParser.LPAR)
            self.state = 1255
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1250
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1244
                    self.positional_patterns()
                    self.state = 1247
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                    if la_ == 1:
                        self.state = 1245
                        self.match(PythonParser.COMMA)
                        self.state = 1246
                        self.keyword_patterns()


                    pass

                elif la_ == 2:
                    self.state = 1249
                    self.keyword_patterns()
                    pass


                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1252
                    self.match(PythonParser.COMMA)




            self.state = 1257
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Positional_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.PatternContext)
            else:
                return self.getTypedRuleContext(PythonParser.PatternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_positional_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPositional_patterns" ):
                return visitor.visitPositional_patterns(self)
            else:
                return visitor.visitChildren(self)




    def positional_patterns(self):

        localctx = PythonParser.Positional_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_positional_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1259
            self.pattern()
            self.state = 1264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,142,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1260
                    self.match(PythonParser.COMMA)
                    self.state = 1261
                    self.pattern() 
                self.state = 1266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,142,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword_pattern(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Keyword_patternContext)
            else:
                return self.getTypedRuleContext(PythonParser.Keyword_patternContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_keyword_patterns

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_patterns" ):
                return visitor.visitKeyword_patterns(self)
            else:
                return visitor.visitChildren(self)




    def keyword_patterns(self):

        localctx = PythonParser.Keyword_patternsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_keyword_patterns)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.keyword_pattern()
            self.state = 1272
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,143,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1268
                    self.match(PythonParser.COMMA)
                    self.state = 1269
                    self.keyword_pattern() 
                self.state = 1274
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,143,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Keyword_patternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def pattern(self):
            return self.getTypedRuleContext(PythonParser.PatternContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_keyword_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword_pattern" ):
                return visitor.visitKeyword_pattern(self)
            else:
                return visitor.visitChildren(self)




    def keyword_pattern(self):

        localctx = PythonParser.Keyword_patternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_keyword_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(PythonParser.NAME)
            self.state = 1276
            self.match(PythonParser.EQUAL)
            self.state = 1277
            self.pattern()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def soft_kw_type(self):
            return self.getTypedRuleContext(PythonParser.Soft_kw_typeContext,0)


        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def type_params(self):
            return self.getTypedRuleContext(PythonParser.Type_paramsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_type_alias

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_alias" ):
                return visitor.visitType_alias(self)
            else:
                return visitor.visitChildren(self)




    def type_alias(self):

        localctx = PythonParser.Type_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_type_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.soft_kw_type()
            self.state = 1280
            self.match(PythonParser.NAME)
            self.state = 1282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 1281
                self.type_params()


            self.state = 1284
            self.match(PythonParser.EQUAL)
            self.state = 1285
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def type_param_seq(self):
            return self.getTypedRuleContext(PythonParser.Type_param_seqContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_params" ):
                return visitor.visitType_params(self)
            else:
                return visitor.visitChildren(self)




    def type_params(self):

        localctx = PythonParser.Type_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_type_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(PythonParser.LSQB)
            self.state = 1288
            self.type_param_seq()
            self.state = 1289
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_param_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type_param(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Type_paramContext)
            else:
                return self.getTypedRuleContext(PythonParser.Type_paramContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_type_param_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param_seq" ):
                return visitor.visitType_param_seq(self)
            else:
                return visitor.visitChildren(self)




    def type_param_seq(self):

        localctx = PythonParser.Type_param_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_type_param_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            self.type_param()
            self.state = 1296
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1292
                    self.match(PythonParser.COMMA)
                    self.state = 1293
                    self.type_param() 
                self.state = 1298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1299
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def type_param_bound(self):
            return self.getTypedRuleContext(PythonParser.Type_param_boundContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param" ):
                return visitor.visitType_param(self)
            else:
                return visitor.visitChildren(self)




    def type_param(self):

        localctx = PythonParser.Type_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_type_param)
        self._la = 0 # Token type
        try:
            self.state = 1310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1302
                self.match(PythonParser.NAME)
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1303
                    self.type_param_bound()


                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1306
                self.match(PythonParser.STAR)
                self.state = 1307
                self.match(PythonParser.NAME)
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1308
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1309
                self.match(PythonParser.NAME)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_param_boundContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_type_param_bound

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_param_bound" ):
                return visitor.visitType_param_bound(self)
            else:
                return visitor.visitChildren(self)




    def type_param_bound(self):

        localctx = PythonParser.Type_param_boundContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_type_param_bound)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(PythonParser.COLON)
            self.state = 1313
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressions" ):
                return visitor.visitExpressions(self)
            else:
                return visitor.visitChildren(self)




    def expressions(self):

        localctx = PythonParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            self.expression()
            self.state = 1320
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,149,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1316
                    self.match(PythonParser.COMMA)
                    self.state = 1317
                    self.expression() 
                self.state = 1322
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,149,self._ctx)

            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1323
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.DisjunctionContext,i)


        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def lambdef(self):
            return self.getTypedRuleContext(PythonParser.LambdefContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = PythonParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.state = 1335
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 7, 8, 12, 17, 35, 42, 43, 44, 52, 53, 66, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1326
                self.disjunction()
                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==39:
                    self.state = 1327
                    self.match(PythonParser.IF)
                    self.state = 1328
                    self.disjunction()
                    self.state = 1329
                    self.match(PythonParser.ELSE)
                    self.state = 1330
                    self.expression()


                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1334
                self.lambdef()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonParser.YIELD, 0)

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = PythonParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_yield_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(PythonParser.YIELD)
            self.state = 1343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [29]:
                self.state = 1338
                self.match(PythonParser.FROM)
                self.state = 1339
                self.expression()
                pass
            elif token in [3, 4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 45, 47, 49, 51, 52, 53, 54, 60, 66, 87, 89, 90, 91, 92, 93]:
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                    self.state = 1340
                    self.star_expressions()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expressions" ):
                return visitor.visitStar_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_expressions(self):

        localctx = PythonParser.Star_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_star_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.star_expression()
            self.state = 1350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,155,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1346
                    self.match(PythonParser.COMMA)
                    self.state = 1347
                    self.star_expression() 
                self.state = 1352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,155,self._ctx)

            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1353
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expression" ):
                return visitor.visitStar_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_expression(self):

        localctx = PythonParser.Star_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_star_expression)
        try:
            self.state = 1359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1356
                self.match(PythonParser.STAR)
                self.state = 1357
                self.bitwise_or(0)
                pass
            elif token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 66, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1358
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_named_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_named_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_named_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expressions" ):
                return visitor.visitStar_named_expressions(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expressions(self):

        localctx = PythonParser.Star_named_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_star_named_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.star_named_expression()
            self.state = 1366
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1362
                    self.match(PythonParser.COMMA)
                    self.state = 1363
                    self.star_named_expression() 
                self.state = 1368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1369
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_named_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_named_expression" ):
                return visitor.visitStar_named_expression(self)
            else:
                return visitor.visitChildren(self)




    def star_named_expression(self):

        localctx = PythonParser.Star_named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_star_named_expression)
        try:
            self.state = 1375
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1372
                self.match(PythonParser.STAR)
                self.state = 1373
                self.bitwise_or(0)
                pass
            elif token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 66, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1374
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assignment_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def COLONEQUAL(self):
            return self.getToken(PythonParser.COLONEQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_assignment_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignment_expression" ):
                return visitor.visitAssignment_expression(self)
            else:
                return visitor.visitChildren(self)




    def assignment_expression(self):

        localctx = PythonParser.Assignment_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_assignment_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(PythonParser.NAME)
            self.state = 1378
            self.match(PythonParser.COLONEQUAL)
            self.state = 1379
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_named_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_expression" ):
                return visitor.visitNamed_expression(self)
            else:
                return visitor.visitChildren(self)




    def named_expression(self):

        localctx = PythonParser.Named_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_named_expression)
        try:
            self.state = 1383
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ConjunctionContext,i)


        def OR(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.OR)
            else:
                return self.getToken(PythonParser.OR, i)

        def getRuleIndex(self):
            return PythonParser.RULE_disjunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = PythonParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            self.conjunction()
            self.state = 1390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==40:
                self.state = 1386
                self.match(PythonParser.OR)
                self.state = 1387
                self.conjunction()
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inversion(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.InversionContext)
            else:
                return self.getTypedRuleContext(PythonParser.InversionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.AND)
            else:
                return self.getToken(PythonParser.AND, i)

        def getRuleIndex(self):
            return PythonParser.RULE_conjunction

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = PythonParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            self.inversion()
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==22:
                self.state = 1394
                self.match(PythonParser.AND)
                self.state = 1395
                self.inversion()
                self.state = 1400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def inversion(self):
            return self.getTypedRuleContext(PythonParser.InversionContext,0)


        def comparison(self):
            return self.getTypedRuleContext(PythonParser.ComparisonContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_inversion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInversion" ):
                return visitor.visitInversion(self)
            else:
                return visitor.visitChildren(self)




    def inversion(self):

        localctx = PythonParser.InversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_inversion)
        try:
            self.state = 1404
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1401
                self.match(PythonParser.NOT)
                self.state = 1402
                self.inversion()
                pass
            elif token in [4, 7, 8, 12, 17, 42, 43, 44, 52, 53, 66, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1403
                self.comparison()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def compare_op_bitwise_or_pair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Compare_op_bitwise_or_pairContext)
            else:
                return self.getTypedRuleContext(PythonParser.Compare_op_bitwise_or_pairContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_comparison

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = PythonParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_comparison)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1406
            self.bitwise_or(0)
            self.state = 1410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 15)) & ~0x3f) == 0 and ((1 << (_la - 15)) & 2137450605445153) != 0):
                self.state = 1407
                self.compare_op_bitwise_or_pair()
                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compare_op_bitwise_or_pairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def eq_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Eq_bitwise_orContext,0)


        def noteq_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Noteq_bitwise_orContext,0)


        def lte_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Lte_bitwise_orContext,0)


        def lt_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Lt_bitwise_orContext,0)


        def gte_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Gte_bitwise_orContext,0)


        def gt_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Gt_bitwise_orContext,0)


        def notin_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Notin_bitwise_orContext,0)


        def in_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.In_bitwise_orContext,0)


        def isnot_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Isnot_bitwise_orContext,0)


        def is_bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Is_bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_compare_op_bitwise_or_pair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompare_op_bitwise_or_pair" ):
                return visitor.visitCompare_op_bitwise_or_pair(self)
            else:
                return visitor.visitChildren(self)




    def compare_op_bitwise_or_pair(self):

        localctx = PythonParser.Compare_op_bitwise_or_pairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_compare_op_bitwise_or_pair)
        try:
            self.state = 1423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1413
                self.eq_bitwise_or()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1414
                self.noteq_bitwise_or()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1415
                self.lte_bitwise_or()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1416
                self.lt_bitwise_or()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1417
                self.gte_bitwise_or()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1418
                self.gt_bitwise_or()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1419
                self.notin_bitwise_or()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1420
                self.in_bitwise_or()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1421
                self.isnot_bitwise_or()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1422
                self.is_bitwise_or()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eq_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQEQUAL(self):
            return self.getToken(PythonParser.EQEQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_eq_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEq_bitwise_or" ):
                return visitor.visitEq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def eq_bitwise_or(self):

        localctx = PythonParser.Eq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_eq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1425
            self.match(PythonParser.EQEQUAL)
            self.state = 1426
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noteq_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def NOTEQUAL(self):
            return self.getToken(PythonParser.NOTEQUAL, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_noteq_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoteq_bitwise_or" ):
                return visitor.visitNoteq_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def noteq_bitwise_or(self):

        localctx = PythonParser.Noteq_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_noteq_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.match(PythonParser.NOTEQUAL)
            self.state = 1429
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lte_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESSEQUAL(self):
            return self.getToken(PythonParser.LESSEQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lte_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLte_bitwise_or" ):
                return visitor.visitLte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def lte_bitwise_or(self):

        localctx = PythonParser.Lte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_lte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1431
            self.match(PythonParser.LESSEQUAL)
            self.state = 1432
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lt_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS(self):
            return self.getToken(PythonParser.LESS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lt_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLt_bitwise_or" ):
                return visitor.visitLt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def lt_bitwise_or(self):

        localctx = PythonParser.Lt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_lt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(PythonParser.LESS)
            self.state = 1435
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gte_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATEREQUAL(self):
            return self.getToken(PythonParser.GREATEREQUAL, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_gte_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGte_bitwise_or" ):
                return visitor.visitGte_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def gte_bitwise_or(self):

        localctx = PythonParser.Gte_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_gte_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self.match(PythonParser.GREATEREQUAL)
            self.state = 1438
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Gt_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GREATER(self):
            return self.getToken(PythonParser.GREATER, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_gt_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGt_bitwise_or" ):
                return visitor.visitGt_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def gt_bitwise_or(self):

        localctx = PythonParser.Gt_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_gt_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1440
            self.match(PythonParser.GREATER)
            self.state = 1441
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Notin_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_notin_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotin_bitwise_or" ):
                return visitor.visitNotin_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def notin_bitwise_or(self):

        localctx = PythonParser.Notin_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_notin_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1443
            self.match(PythonParser.NOT)
            self.state = 1444
            self.match(PythonParser.IN)
            self.state = 1445
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class In_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_in_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIn_bitwise_or" ):
                return visitor.visitIn_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def in_bitwise_or(self):

        localctx = PythonParser.In_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_in_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(PythonParser.IN)
            self.state = 1448
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Isnot_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_isnot_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsnot_bitwise_or" ):
                return visitor.visitIsnot_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def isnot_bitwise_or(self):

        localctx = PythonParser.Isnot_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_isnot_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(PythonParser.IS)
            self.state = 1451
            self.match(PythonParser.NOT)
            self.state = 1452
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_is_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIs_bitwise_or" ):
                return visitor.visitIs_bitwise_or(self)
            else:
                return visitor.visitChildren(self)




    def is_bitwise_or(self):

        localctx = PythonParser.Is_bitwise_orContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_is_bitwise_or)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1454
            self.match(PythonParser.IS)
            self.state = 1455
            self.bitwise_or(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Bitwise_orContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_xor(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_xorContext,0)


        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def VBAR(self):
            return self.getToken(PythonParser.VBAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_or

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_or" ):
                return visitor.visitBitwise_or(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_or(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_orContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 254
        self.enterRecursionRule(localctx, 254, self.RULE_bitwise_or, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1458
            self.bitwise_xor(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_orContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_or)
                    self.state = 1460
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1461
                    self.match(PythonParser.VBAR)
                    self.state = 1462
                    self.bitwise_xor(0) 
                self.state = 1467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Bitwise_xorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def bitwise_and(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_andContext,0)


        def bitwise_xor(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_xorContext,0)


        def CIRCUMFLEX(self):
            return self.getToken(PythonParser.CIRCUMFLEX, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_xor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_xor" ):
                return visitor.visitBitwise_xor(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_xor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_xorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 256
        self.enterRecursionRule(localctx, 256, self.RULE_bitwise_xor, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1469
            self.bitwise_and(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1476
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_xorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_xor)
                    self.state = 1471
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1472
                    self.match(PythonParser.CIRCUMFLEX)
                    self.state = 1473
                    self.bitwise_and(0) 
                self.state = 1478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Bitwise_andContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shift_expr(self):
            return self.getTypedRuleContext(PythonParser.Shift_exprContext,0)


        def bitwise_and(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_andContext,0)


        def AMPER(self):
            return self.getToken(PythonParser.AMPER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_bitwise_and

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBitwise_and" ):
                return visitor.visitBitwise_and(self)
            else:
                return visitor.visitChildren(self)



    def bitwise_and(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Bitwise_andContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 258
        self.enterRecursionRule(localctx, 258, self.RULE_bitwise_and, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            self.shift_expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1487
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Bitwise_andContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_bitwise_and)
                    self.state = 1482
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1483
                    self.match(PythonParser.AMPER)
                    self.state = 1484
                    self.shift_expr(0) 
                self.state = 1489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Shift_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sum_(self):
            return self.getTypedRuleContext(PythonParser.SumContext,0)


        def shift_expr(self):
            return self.getTypedRuleContext(PythonParser.Shift_exprContext,0)


        def LEFTSHIFT(self):
            return self.getToken(PythonParser.LEFTSHIFT, 0)

        def RIGHTSHIFT(self):
            return self.getToken(PythonParser.RIGHTSHIFT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_shift_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShift_expr" ):
                return visitor.visitShift_expr(self)
            else:
                return visitor.visitChildren(self)



    def shift_expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Shift_exprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 260
        self.enterRecursionRule(localctx, 260, self.RULE_shift_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            self.sum_(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1498
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Shift_exprContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shift_expr)
                    self.state = 1493
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1494
                    _la = self._input.LA(1)
                    if not(_la==68 or _la==69):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1495
                    self.sum_(0) 
                self.state = 1500
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SumContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self):
            return self.getTypedRuleContext(PythonParser.TermContext,0)


        def sum_(self):
            return self.getTypedRuleContext(PythonParser.SumContext,0)


        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_sum

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSum" ):
                return visitor.visitSum(self)
            else:
                return visitor.visitChildren(self)



    def sum_(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.SumContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 262
        self.enterRecursionRule(localctx, 262, self.RULE_sum, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            self.term(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.SumContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_sum)
                    self.state = 1504
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1505
                    _la = self._input.LA(1)
                    if not(_la==52 or _la==53):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1506
                    self.term(0) 
                self.state = 1511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def term(self):
            return self.getTypedRuleContext(PythonParser.TermContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def DOUBLESLASH(self):
            return self.getToken(PythonParser.DOUBLESLASH, 0)

        def PERCENT(self):
            return self.getToken(PythonParser.PERCENT, 0)

        def AT(self):
            return self.getToken(PythonParser.AT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_term

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTerm" ):
                return visitor.visitTerm(self)
            else:
                return visitor.visitChildren(self)



    def term(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.TermContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_term, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.factor()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.TermContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_term)
                    self.state = 1515
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1516
                    _la = self._input.LA(1)
                    if not(((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 1342177411) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1517
                    self.factor() 
                self.state = 1522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def TILDE(self):
            return self.getToken(PythonParser.TILDE, 0)

        def power(self):
            return self.getTypedRuleContext(PythonParser.PowerContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_factor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactor" ):
                return visitor.visitFactor(self)
            else:
                return visitor.visitChildren(self)




    def factor(self):

        localctx = PythonParser.FactorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_factor)
        try:
            self.state = 1530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1523
                self.match(PythonParser.PLUS)
                self.state = 1524
                self.factor()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1525
                self.match(PythonParser.MINUS)
                self.state = 1526
                self.factor()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1527
                self.match(PythonParser.TILDE)
                self.state = 1528
                self.factor()
                pass
            elif token in [4, 7, 8, 12, 17, 42, 43, 44, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1529
                self.power()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PowerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def await_primary(self):
            return self.getTypedRuleContext(PythonParser.Await_primaryContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def factor(self):
            return self.getTypedRuleContext(PythonParser.FactorContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_power

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPower" ):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = PythonParser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1532
            self.await_primary()
            self.state = 1535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1533
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1534
                self.factor()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Await_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT(self):
            return self.getToken(PythonParser.AWAIT, 0)

        def primary(self):
            return self.getTypedRuleContext(PythonParser.PrimaryContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_await_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAwait_primary" ):
                return visitor.visitAwait_primary(self)
            else:
                return visitor.visitChildren(self)




    def await_primary(self):

        localctx = PythonParser.Await_primaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_await_primary)
        try:
            self.state = 1540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1537
                self.match(PythonParser.AWAIT)
                self.state = 1538
                self.primary(0)
                pass
            elif token in [4, 7, 12, 17, 42, 43, 44, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1539
                self.primary(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def primary(self):
            return self.getTypedRuleContext(PythonParser.PrimaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimary" ):
                return visitor.visitPrimary(self)
            else:
                return visitor.visitChildren(self)



    def primary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.PrimaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_primary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1562
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,178,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.PrimaryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_primary)
                    self.state = 1545
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 1558
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
                    if la_ == 1:
                        self.state = 1546
                        self.match(PythonParser.DOT)
                        self.state = 1547
                        self.match(PythonParser.NAME)
                        pass

                    elif la_ == 2:
                        self.state = 1548
                        self.genexp()
                        pass

                    elif la_ == 3:
                        self.state = 1549
                        self.match(PythonParser.LPAR)
                        self.state = 1551
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537681) != 0):
                            self.state = 1550
                            self.arguments()


                        self.state = 1553
                        self.match(PythonParser.RPAR)
                        pass

                    elif la_ == 4:
                        self.state = 1554
                        self.match(PythonParser.LSQB)
                        self.state = 1555
                        self.slices()
                        self.state = 1556
                        self.match(PythonParser.RSQB)
                        pass

             
                self.state = 1564
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,178,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SlicesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def slice_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.SliceContext)
            else:
                return self.getTypedRuleContext(PythonParser.SliceContext,i)


        def starred_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Starred_expressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.Starred_expressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_slices

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlices" ):
                return visitor.visitSlices(self)
            else:
                return visitor.visitChildren(self)




    def slices(self):

        localctx = PythonParser.SlicesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_slices)
        self._la = 0 # Token type
        try:
            self.state = 1583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1565
                self.slice_()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1568
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 49, 52, 53, 66, 87, 90, 91, 92]:
                    self.state = 1566
                    self.slice_()
                    pass
                elif token in [54]:
                    self.state = 1567
                    self.starred_expression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1577
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,181,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1570
                        self.match(PythonParser.COMMA)
                        self.state = 1573
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 49, 52, 53, 66, 87, 90, 91, 92]:
                            self.state = 1571
                            self.slice_()
                            pass
                        elif token in [54]:
                            self.state = 1572
                            self.starred_expression()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1579
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,181,self._ctx)

                self.state = 1581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1580
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COLON)
            else:
                return self.getToken(PythonParser.COLON, i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_slice

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSlice" ):
                return visitor.visitSlice(self)
            else:
                return visitor.visitChildren(self)




    def slice_(self):

        localctx = PythonParser.SliceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_slice)
        self._la = 0 # Token type
        try:
            self.state = 1599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13541619601117584) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                    self.state = 1585
                    self.expression()


                self.state = 1588
                self.match(PythonParser.COLON)
                self.state = 1590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13541619601117584) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                    self.state = 1589
                    self.expression()


                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==49:
                    self.state = 1592
                    self.match(PythonParser.COLON)
                    self.state = 1594
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13541619601117584) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                        self.state = 1593
                        self.expression()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1598
                self.named_expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def strings(self):
            return self.getTypedRuleContext(PythonParser.StringsContext,0)


        def NUMBER(self):
            return self.getToken(PythonParser.NUMBER, 0)

        def tuple_(self):
            return self.getTypedRuleContext(PythonParser.TupleContext,0)


        def group(self):
            return self.getTypedRuleContext(PythonParser.GroupContext,0)


        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def list_(self):
            return self.getTypedRuleContext(PythonParser.ListContext,0)


        def listcomp(self):
            return self.getTypedRuleContext(PythonParser.ListcompContext,0)


        def dict_(self):
            return self.getTypedRuleContext(PythonParser.DictContext,0)


        def set_(self):
            return self.getTypedRuleContext(PythonParser.SetContext,0)


        def dictcomp(self):
            return self.getTypedRuleContext(PythonParser.DictcompContext,0)


        def setcomp(self):
            return self.getTypedRuleContext(PythonParser.SetcompContext,0)


        def ELLIPSIS(self):
            return self.getToken(PythonParser.ELLIPSIS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PythonParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_atom)
        try:
            self.state = 1623
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1601
                self.match(PythonParser.NAME)
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1602
                self.match(PythonParser.TRUE)
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1603
                self.match(PythonParser.FALSE)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1604
                self.match(PythonParser.NONE)
                pass
            elif token in [4, 92]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1605
                self.strings()
                pass
            elif token in [91]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1606
                self.match(PythonParser.NUMBER)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1607
                    self.tuple_()
                    pass

                elif la_ == 2:
                    self.state = 1608
                    self.group()
                    pass

                elif la_ == 3:
                    self.state = 1609
                    self.genexp()
                    pass


                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1614
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1612
                    self.list_()
                    pass

                elif la_ == 2:
                    self.state = 1613
                    self.listcomp()
                    pass


                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1620
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1616
                    self.dict_()
                    pass

                elif la_ == 2:
                    self.state = 1617
                    self.set_()
                    pass

                elif la_ == 3:
                    self.state = 1618
                    self.dictcomp()
                    pass

                elif la_ == 4:
                    self.state = 1619
                    self.setcomp()
                    pass


                pass
            elif token in [87]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1622
                self.match(PythonParser.ELLIPSIS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_group

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup" ):
                return visitor.visitGroup(self)
            else:
                return visitor.visitChildren(self)




    def group(self):

        localctx = PythonParser.GroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.match(PythonParser.LPAR)
            self.state = 1628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.state = 1626
                self.yield_expr()
                pass
            elif token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 66, 87, 90, 91, 92]:
                self.state = 1627
                self.named_expression()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1630
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LAMBDA(self):
            return self.getToken(PythonParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def lambda_params(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambdef

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdef" ):
                return visitor.visitLambdef(self)
            else:
                return visitor.visitChildren(self)




    def lambdef(self):

        localctx = PythonParser.LambdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_lambdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1632
            self.match(PythonParser.LAMBDA)
            self.state = 1634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 54)) & ~0x3f) == 0 and ((1 << (_la - 54)) & 68719542273) != 0):
                self.state = 1633
                self.lambda_params()


            self.state = 1636
            self.match(PythonParser.COLON)
            self.state = 1637
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_paramsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_parameters(self):
            return self.getTypedRuleContext(PythonParser.Lambda_parametersContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_params

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_params" ):
                return visitor.visitLambda_params(self)
            else:
                return visitor.visitChildren(self)




    def lambda_params(self):

        localctx = PythonParser.Lambda_paramsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_lambda_params)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.lambda_parameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_slash_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_slash_no_defaultContext,0)


        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def lambda_param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_with_defaultContext,i)


        def lambda_star_etc(self):
            return self.getTypedRuleContext(PythonParser.Lambda_star_etcContext,0)


        def lambda_slash_with_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_slash_with_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_parameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_parameters" ):
                return visitor.visitLambda_parameters(self)
            else:
                return visitor.visitChildren(self)




    def lambda_parameters(self):

        localctx = PythonParser.Lambda_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_lambda_parameters)
        self._la = 0 # Token type
        try:
            self.state = 1690
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1641
                self.lambda_slash_no_default()
                self.state = 1645
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1642
                        self.lambda_param_no_default() 
                    self.state = 1647
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1648
                    self.lambda_param_with_default()
                    self.state = 1653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==70:
                    self.state = 1654
                    self.lambda_star_etc()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1657
                self.lambda_slash_with_default()
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1658
                    self.lambda_param_with_default()
                    self.state = 1663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==70:
                    self.state = 1664
                    self.lambda_star_etc()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1668 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1667
                        self.lambda_param_no_default()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1670 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,200,self._ctx)

                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1672
                    self.lambda_param_with_default()
                    self.state = 1677
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==70:
                    self.state = 1678
                    self.lambda_star_etc()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1682 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1681
                    self.lambda_param_with_default()
                    self.state = 1684 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==90):
                        break

                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==54 or _la==70:
                    self.state = 1686
                    self.lambda_star_etc()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1689
                self.lambda_star_etc()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_slash_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_slash_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_slash_no_default" ):
                return visitor.visitLambda_slash_no_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_slash_no_default(self):

        localctx = PythonParser.Lambda_slash_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_lambda_slash_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1693 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1692
                self.lambda_param_no_default()
                self.state = 1695 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==90):
                    break

            self.state = 1697
            self.match(PythonParser.SLASH)
            self.state = 1699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1698
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_slash_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLASH(self):
            return self.getToken(PythonParser.SLASH, 0)

        def lambda_param_no_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_no_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,i)


        def lambda_param_with_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_with_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_with_defaultContext,i)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_slash_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_slash_with_default" ):
                return visitor.visitLambda_slash_with_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_slash_with_default(self):

        localctx = PythonParser.Lambda_slash_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_lambda_slash_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1701
                    self.lambda_param_no_default() 
                self.state = 1706
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

            self.state = 1708 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1707
                self.lambda_param_with_default()
                self.state = 1710 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==90):
                    break

            self.state = 1712
            self.match(PythonParser.SLASH)
            self.state = 1714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1713
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_star_etcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,0)


        def lambda_param_maybe_default(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Lambda_param_maybe_defaultContext)
            else:
                return self.getTypedRuleContext(PythonParser.Lambda_param_maybe_defaultContext,i)


        def lambda_kwds(self):
            return self.getTypedRuleContext(PythonParser.Lambda_kwdsContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_star_etc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_star_etc" ):
                return visitor.visitLambda_star_etc(self)
            else:
                return visitor.visitChildren(self)




    def lambda_star_etc(self):

        localctx = PythonParser.Lambda_star_etcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_lambda_star_etc)
        self._la = 0 # Token type
        try:
            self.state = 1738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1716
                self.match(PythonParser.STAR)
                self.state = 1717
                self.lambda_param_no_default()
                self.state = 1721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==90:
                    self.state = 1718
                    self.lambda_param_maybe_default()
                    self.state = 1723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 1724
                    self.lambda_kwds()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1727
                self.match(PythonParser.STAR)
                self.state = 1728
                self.match(PythonParser.COMMA)
                self.state = 1730 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1729
                    self.lambda_param_maybe_default()
                    self.state = 1732 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==90):
                        break

                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==70:
                    self.state = 1734
                    self.lambda_kwds()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1737
                self.lambda_kwds()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_kwdsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def lambda_param_no_default(self):
            return self.getTypedRuleContext(PythonParser.Lambda_param_no_defaultContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_lambda_kwds

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_kwds" ):
                return visitor.visitLambda_kwds(self)
            else:
                return visitor.visitChildren(self)




    def lambda_kwds(self):

        localctx = PythonParser.Lambda_kwdsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_lambda_kwds)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.match(PythonParser.DOUBLESTAR)
            self.state = 1741
            self.lambda_param_no_default()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_no_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_no_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_no_default" ):
                return visitor.visitLambda_param_no_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_no_default(self):

        localctx = PythonParser.Lambda_param_no_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_lambda_param_no_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1743
            self.lambda_param()
            self.state = 1745
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1744
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_with_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_with_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_with_default" ):
                return visitor.visitLambda_param_with_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_with_default(self):

        localctx = PythonParser.Lambda_param_with_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_lambda_param_with_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self.lambda_param()
            self.state = 1748
            self.default_assignment()
            self.state = 1750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1749
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_param_maybe_defaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambda_param(self):
            return self.getTypedRuleContext(PythonParser.Lambda_paramContext,0)


        def default_assignment(self):
            return self.getTypedRuleContext(PythonParser.Default_assignmentContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param_maybe_default

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param_maybe_default" ):
                return visitor.visitLambda_param_maybe_default(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param_maybe_default(self):

        localctx = PythonParser.Lambda_param_maybe_defaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_lambda_param_maybe_default)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1752
            self.lambda_param()
            self.state = 1754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1753
                self.default_assignment()


            self.state = 1757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1756
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Lambda_paramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_lambda_param

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambda_param" ):
                return visitor.visitLambda_param(self)
            else:
                return visitor.visitChildren(self)




    def lambda_param(self):

        localctx = PythonParser.Lambda_paramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_lambda_param)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_middleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(PythonParser.Fstring_replacement_fieldContext,0)


        def FSTRING_MIDDLE(self):
            return self.getToken(PythonParser.FSTRING_MIDDLE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_fstring_middle

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_middle" ):
                return visitor.visitFstring_middle(self)
            else:
                return visitor.visitChildren(self)




    def fstring_middle(self):

        localctx = PythonParser.Fstring_middleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_fstring_middle)
        try:
            self.state = 1763
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1761
                self.fstring_replacement_field()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1762
                self.match(PythonParser.FSTRING_MIDDLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_replacement_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def star_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_expressionsContext,0)


        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def fstring_conversion(self):
            return self.getTypedRuleContext(PythonParser.Fstring_conversionContext,0)


        def fstring_full_format_spec(self):
            return self.getTypedRuleContext(PythonParser.Fstring_full_format_specContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_replacement_field

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_replacement_field" ):
                return visitor.visitFstring_replacement_field(self)
            else:
                return visitor.visitChildren(self)




    def fstring_replacement_field(self):

        localctx = PythonParser.Fstring_replacement_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_fstring_replacement_field)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1765
            self.match(PythonParser.LBRACE)
            self.state = 1768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [41]:
                self.state = 1766
                self.yield_expr()
                pass
            elif token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 54, 66, 87, 90, 91, 92]:
                self.state = 1767
                self.star_expressions()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 1770
                self.match(PythonParser.EQUAL)


            self.state = 1774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89:
                self.state = 1773
                self.fstring_conversion()


            self.state = 1777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==49:
                self.state = 1776
                self.fstring_full_format_spec()


            self.state = 1779
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_conversionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION(self):
            return self.getToken(PythonParser.EXCLAMATION, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_fstring_conversion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_conversion" ):
                return visitor.visitFstring_conversion(self)
            else:
                return visitor.visitChildren(self)




    def fstring_conversion(self):

        localctx = PythonParser.Fstring_conversionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_fstring_conversion)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1781
            self.match(PythonParser.EXCLAMATION)
            self.state = 1782
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_full_format_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def fstring_format_spec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Fstring_format_specContext)
            else:
                return self.getTypedRuleContext(PythonParser.Fstring_format_specContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_full_format_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_full_format_spec" ):
                return visitor.visitFstring_full_format_spec(self)
            else:
                return visitor.visitChildren(self)




    def fstring_full_format_spec(self):

        localctx = PythonParser.Fstring_full_format_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_fstring_full_format_spec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(PythonParser.COLON)
            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==44:
                self.state = 1785
                self.fstring_format_spec()
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Fstring_format_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_MIDDLE(self):
            return self.getToken(PythonParser.FSTRING_MIDDLE, 0)

        def fstring_replacement_field(self):
            return self.getTypedRuleContext(PythonParser.Fstring_replacement_fieldContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring_format_spec

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring_format_spec" ):
                return visitor.visitFstring_format_spec(self)
            else:
                return visitor.visitChildren(self)




    def fstring_format_spec(self):

        localctx = PythonParser.Fstring_format_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_fstring_format_spec)
        try:
            self.state = 1793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1791
                self.match(PythonParser.FSTRING_MIDDLE)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1792
                self.fstring_replacement_field()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FstringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FSTRING_START(self):
            return self.getToken(PythonParser.FSTRING_START, 0)

        def FSTRING_END(self):
            return self.getToken(PythonParser.FSTRING_END, 0)

        def fstring_middle(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Fstring_middleContext)
            else:
                return self.getTypedRuleContext(PythonParser.Fstring_middleContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_fstring

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFstring" ):
                return visitor.visitFstring(self)
            else:
                return visitor.visitChildren(self)




    def fstring(self):

        localctx = PythonParser.FstringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_fstring)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1795
            self.match(PythonParser.FSTRING_START)
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==44:
                self.state = 1796
                self.fstring_middle()
                self.state = 1801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1802
            self.match(PythonParser.FSTRING_END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(PythonParser.STRING, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_string

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitString" ):
                return visitor.visitString(self)
            else:
                return visitor.visitChildren(self)




    def string(self):

        localctx = PythonParser.StringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.match(PythonParser.STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fstring(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.FstringContext)
            else:
                return self.getTypedRuleContext(PythonParser.FstringContext,i)


        def string(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StringContext)
            else:
                return self.getTypedRuleContext(PythonParser.StringContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_strings

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStrings" ):
                return visitor.visitStrings(self)
            else:
                return visitor.visitChildren(self)




    def strings(self):

        localctx = PythonParser.StringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_strings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1808
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [4]:
                        self.state = 1806
                        self.fstring()
                        pass
                    elif token in [92]:
                        self.state = 1807
                        self.string()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1810 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_list

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitList" ):
                return visitor.visitList(self)
            else:
                return visitor.visitChildren(self)




    def list_(self):

        localctx = PythonParser.ListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            self.match(PythonParser.LSQB)
            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                self.state = 1813
                self.star_named_expressions()


            self.state = 1816
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def star_named_expression(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_tuple

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTuple" ):
                return visitor.visitTuple(self)
            else:
                return visitor.visitChildren(self)




    def tuple_(self):

        localctx = PythonParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_tuple)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1818
            self.match(PythonParser.LPAR)
            self.state = 1824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                self.state = 1819
                self.star_named_expression()
                self.state = 1820
                self.match(PythonParser.COMMA)
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537665) != 0):
                    self.state = 1821
                    self.star_named_expressions()




            self.state = 1826
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def star_named_expressions(self):
            return self.getTypedRuleContext(PythonParser.Star_named_expressionsContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_set

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)




    def set_(self):

        localctx = PythonParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1828
            self.match(PythonParser.LBRACE)
            self.state = 1829
            self.star_named_expressions()
            self.state = 1830
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def double_starred_kvpairs(self):
            return self.getTypedRuleContext(PythonParser.Double_starred_kvpairsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_dict

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDict" ):
                return visitor.visitDict(self)
            else:
                return visitor.visitChildren(self)




    def dict_(self):

        localctx = PythonParser.DictContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_dict)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1832
            self.match(PythonParser.LBRACE)
            self.state = 1834
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 13541619601117584) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537681) != 0):
                self.state = 1833
                self.double_starred_kvpairs()


            self.state = 1836
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_starred_kvpairsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def double_starred_kvpair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Double_starred_kvpairContext)
            else:
                return self.getTypedRuleContext(PythonParser.Double_starred_kvpairContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_double_starred_kvpairs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_starred_kvpairs" ):
                return visitor.visitDouble_starred_kvpairs(self)
            else:
                return visitor.visitChildren(self)




    def double_starred_kvpairs(self):

        localctx = PythonParser.Double_starred_kvpairsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_double_starred_kvpairs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1838
            self.double_starred_kvpair()
            self.state = 1843
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1839
                    self.match(PythonParser.COMMA)
                    self.state = 1840
                    self.double_starred_kvpair() 
                self.state = 1845
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

            self.state = 1847
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1846
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Double_starred_kvpairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def bitwise_or(self):
            return self.getTypedRuleContext(PythonParser.Bitwise_orContext,0)


        def kvpair(self):
            return self.getTypedRuleContext(PythonParser.KvpairContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_double_starred_kvpair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDouble_starred_kvpair" ):
                return visitor.visitDouble_starred_kvpair(self)
            else:
                return visitor.visitChildren(self)




    def double_starred_kvpair(self):

        localctx = PythonParser.Double_starred_kvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_double_starred_kvpair)
        try:
            self.state = 1852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1849
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1850
                self.bitwise_or(0)
                pass
            elif token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 66, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1851
                self.kvpair()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KvpairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_kvpair

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKvpair" ):
                return visitor.visitKvpair(self)
            else:
                return visitor.visitChildren(self)




    def kvpair(self):

        localctx = PythonParser.KvpairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_kvpair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1854
            self.expression()
            self.state = 1855
            self.match(PythonParser.COLON)
            self.state = 1856
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_if_clausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def for_if_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.For_if_clauseContext)
            else:
                return self.getTypedRuleContext(PythonParser.For_if_clauseContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_for_if_clauses

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_if_clauses" ):
                return visitor.visitFor_if_clauses(self)
            else:
                return visitor.visitChildren(self)




    def for_if_clauses(self):

        localctx = PythonParser.For_if_clausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_for_if_clauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1859 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1858
                self.for_if_clause()
                self.state = 1861 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==24 or _la==37):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class For_if_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def star_targets(self):
            return self.getTypedRuleContext(PythonParser.Star_targetsContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(PythonParser.DisjunctionContext,i)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.IF)
            else:
                return self.getToken(PythonParser.IF, i)

        def getRuleIndex(self):
            return PythonParser.RULE_for_if_clause

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_if_clause" ):
                return visitor.visitFor_if_clause(self)
            else:
                return visitor.visitChildren(self)




    def for_if_clause(self):

        localctx = PythonParser.For_if_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_for_if_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==37:
                self.state = 1863
                self.match(PythonParser.ASYNC)


            self.state = 1866
            self.match(PythonParser.FOR)
            self.state = 1867
            self.star_targets()
            self.state = 1868
            self.match(PythonParser.IN)
            self.state = 1869
            self.disjunction()
            self.state = 1874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==39:
                self.state = 1870
                self.match(PythonParser.IF)
                self.state = 1871
                self.disjunction()
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_listcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListcomp" ):
                return visitor.visitListcomp(self)
            else:
                return visitor.visitChildren(self)




    def listcomp(self):

        localctx = PythonParser.ListcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_listcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self.match(PythonParser.LSQB)
            self.state = 1878
            self.named_expression()
            self.state = 1879
            self.for_if_clauses()
            self.state = 1880
            self.match(PythonParser.RSQB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def named_expression(self):
            return self.getTypedRuleContext(PythonParser.Named_expressionContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_setcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetcomp" ):
                return visitor.visitSetcomp(self)
            else:
                return visitor.visitChildren(self)




    def setcomp(self):

        localctx = PythonParser.SetcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_setcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1882
            self.match(PythonParser.LBRACE)
            self.state = 1883
            self.named_expression()
            self.state = 1884
            self.for_if_clauses()
            self.state = 1885
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenexpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_genexp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenexp" ):
                return visitor.visitGenexp(self)
            else:
                return visitor.visitChildren(self)




    def genexp(self):

        localctx = PythonParser.GenexpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_genexp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1887
            self.match(PythonParser.LPAR)
            self.state = 1890
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,240,self._ctx)
            if la_ == 1:
                self.state = 1888
                self.assignment_expression()
                pass

            elif la_ == 2:
                self.state = 1889
                self.expression()
                pass


            self.state = 1892
            self.for_if_clauses()
            self.state = 1893
            self.match(PythonParser.RPAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictcompContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LBRACE(self):
            return self.getToken(PythonParser.LBRACE, 0)

        def kvpair(self):
            return self.getTypedRuleContext(PythonParser.KvpairContext,0)


        def for_if_clauses(self):
            return self.getTypedRuleContext(PythonParser.For_if_clausesContext,0)


        def RBRACE(self):
            return self.getToken(PythonParser.RBRACE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dictcomp

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictcomp" ):
                return visitor.visitDictcomp(self)
            else:
                return visitor.visitChildren(self)




    def dictcomp(self):

        localctx = PythonParser.DictcompContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_dictcomp)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            self.match(PythonParser.LBRACE)
            self.state = 1896
            self.kvpair()
            self.state = 1897
            self.for_if_clauses()
            self.state = 1898
            self.match(PythonParser.RBRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(PythonParser.ArgsContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_arguments

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = PythonParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1900
            self.args()
            self.state = 1902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1901
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ArgContext)
            else:
                return self.getTypedRuleContext(PythonParser.ArgContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def kwargs(self):
            return self.getTypedRuleContext(PythonParser.KwargsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_args

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = PythonParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_args)
        try:
            self.state = 1917
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1904
                self.arg()
                self.state = 1909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1905
                        self.match(PythonParser.COMMA)
                        self.state = 1906
                        self.arg() 
                    self.state = 1911
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                self.state = 1914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
                if la_ == 1:
                    self.state = 1912
                    self.match(PythonParser.COMMA)
                    self.state = 1913
                    self.kwargs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1916
                self.kwargs()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def starred_expression(self):
            return self.getTypedRuleContext(PythonParser.Starred_expressionContext,0)


        def assignment_expression(self):
            return self.getTypedRuleContext(PythonParser.Assignment_expressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_arg

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArg" ):
                return visitor.visitArg(self)
            else:
                return visitor.visitChildren(self)




    def arg(self):

        localctx = PythonParser.ArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_arg)
        try:
            self.state = 1922
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1919
                self.starred_expression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1920
                self.assignment_expression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1921
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def kwarg_or_starred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Kwarg_or_starredContext)
            else:
                return self.getTypedRuleContext(PythonParser.Kwarg_or_starredContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def kwarg_or_double_starred(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Kwarg_or_double_starredContext)
            else:
                return self.getTypedRuleContext(PythonParser.Kwarg_or_double_starredContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_kwargs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = PythonParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_kwargs)
        try:
            self.state = 1951
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1924
                self.kwarg_or_starred()
                self.state = 1929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1925
                        self.match(PythonParser.COMMA)
                        self.state = 1926
                        self.kwarg_or_starred() 
                    self.state = 1931
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

                self.state = 1941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 1932
                    self.match(PythonParser.COMMA)
                    self.state = 1933
                    self.kwarg_or_double_starred()
                    self.state = 1938
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,247,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1934
                            self.match(PythonParser.COMMA)
                            self.state = 1935
                            self.kwarg_or_double_starred() 
                        self.state = 1940
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,247,self._ctx)



                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1943
                self.kwarg_or_double_starred()
                self.state = 1948
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,249,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1944
                        self.match(PythonParser.COMMA)
                        self.state = 1945
                        self.kwarg_or_double_starred() 
                    self.state = 1950
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,249,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Starred_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_starred_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStarred_expression" ):
                return visitor.visitStarred_expression(self)
            else:
                return visitor.visitChildren(self)




    def starred_expression(self):

        localctx = PythonParser.Starred_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_starred_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.match(PythonParser.STAR)
            self.state = 1954
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwarg_or_starredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def starred_expression(self):
            return self.getTypedRuleContext(PythonParser.Starred_expressionContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwarg_or_starred

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwarg_or_starred" ):
                return visitor.visitKwarg_or_starred(self)
            else:
                return visitor.visitChildren(self)




    def kwarg_or_starred(self):

        localctx = PythonParser.Kwarg_or_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_kwarg_or_starred)
        try:
            self.state = 1960
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1956
                self.match(PythonParser.NAME)
                self.state = 1957
                self.match(PythonParser.EQUAL)
                self.state = 1958
                self.expression()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1959
                self.starred_expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Kwarg_or_double_starredContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def EQUAL(self):
            return self.getToken(PythonParser.EQUAL, 0)

        def expression(self):
            return self.getTypedRuleContext(PythonParser.ExpressionContext,0)


        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_kwarg_or_double_starred

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwarg_or_double_starred" ):
                return visitor.visitKwarg_or_double_starred(self)
            else:
                return visitor.visitChildren(self)




    def kwarg_or_double_starred(self):

        localctx = PythonParser.Kwarg_or_double_starredContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_kwarg_or_double_starred)
        try:
            self.state = 1967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [90]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1962
                self.match(PythonParser.NAME)
                self.state = 1963
                self.match(PythonParser.EQUAL)
                self.state = 1964
                self.expression()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1965
                self.match(PythonParser.DOUBLESTAR)
                self.state = 1966
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets" ):
                return visitor.visitStar_targets(self)
            else:
                return visitor.visitChildren(self)




    def star_targets(self):

        localctx = PythonParser.Star_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_star_targets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1969
            self.star_target()
            self.state = 1974
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,253,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1970
                    self.match(PythonParser.COMMA)
                    self.state = 1971
                    self.star_target() 
                self.state = 1976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

            self.state = 1978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1977
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targets_list_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets_list_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets_list_seq" ):
                return visitor.visitStar_targets_list_seq(self)
            else:
                return visitor.visitChildren(self)




    def star_targets_list_seq(self):

        localctx = PythonParser.Star_targets_list_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_star_targets_list_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.star_target()
            self.state = 1983 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1981
                    self.match(PythonParser.COMMA)
                    self.state = 1982
                    self.star_target()

                else:
                    raise NoViableAltException(self)
                self.state = 1985 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,255,self._ctx)

            self.state = 1988
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 1987
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targets_tuple_seqContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def star_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_star_targets_tuple_seq

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_targets_tuple_seq" ):
                return visitor.visitStar_targets_tuple_seq(self)
            else:
                return visitor.visitChildren(self)




    def star_targets_tuple_seq(self):

        localctx = PythonParser.Star_targets_tuple_seqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_star_targets_tuple_seq)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.star_target()
            self.state = 2001
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1991
                self.match(PythonParser.COMMA)
                pass

            elif la_ == 2:
                self.state = 1994 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1992
                        self.match(PythonParser.COMMA)
                        self.state = 1993
                        self.star_target()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1996 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,257,self._ctx)

                self.state = 1999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 1998
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def star_target(self):
            return self.getTypedRuleContext(PythonParser.Star_targetContext,0)


        def target_with_star_atom(self):
            return self.getTypedRuleContext(PythonParser.Target_with_star_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_target" ):
                return visitor.visitStar_target(self)
            else:
                return visitor.visitChildren(self)




    def star_target(self):

        localctx = PythonParser.Star_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_star_target)
        try:
            self.state = 2006
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2003
                self.match(PythonParser.STAR)

                self.state = 2004
                self.star_target()
                pass
            elif token in [4, 7, 12, 17, 42, 43, 44, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2005
                self.target_with_star_atom()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Target_with_star_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_atom(self):
            return self.getTypedRuleContext(PythonParser.Star_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_target_with_star_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTarget_with_star_atom" ):
                return visitor.visitTarget_with_star_atom(self)
            else:
                return visitor.visitChildren(self)




    def target_with_star_atom(self):

        localctx = PythonParser.Target_with_star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_target_with_star_atom)
        try:
            self.state = 2018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,262,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2008
                self.t_primary(0)
                self.state = 2015
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [48]:
                    self.state = 2009
                    self.match(PythonParser.DOT)
                    self.state = 2010
                    self.match(PythonParser.NAME)
                    pass
                elif token in [43]:
                    self.state = 2011
                    self.match(PythonParser.LSQB)
                    self.state = 2012
                    self.slices()
                    self.state = 2013
                    self.match(PythonParser.RSQB)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2017
                self.star_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def target_with_star_atom(self):
            return self.getTypedRuleContext(PythonParser.Target_with_star_atomContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def star_targets_tuple_seq(self):
            return self.getTypedRuleContext(PythonParser.Star_targets_tuple_seqContext,0)


        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def star_targets_list_seq(self):
            return self.getTypedRuleContext(PythonParser.Star_targets_list_seqContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_atom" ):
                return visitor.visitStar_atom(self)
            else:
                return visitor.visitChildren(self)




    def star_atom(self):

        localctx = PythonParser.Star_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_star_atom)
        self._la = 0 # Token type
        try:
            self.state = 2035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,265,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2020
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2021
                self.match(PythonParser.LPAR)
                self.state = 2022
                self.target_with_star_atom()
                self.state = 2023
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2025
                self.match(PythonParser.LPAR)
                self.state = 2027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18045184835195024) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 57) != 0):
                    self.state = 2026
                    self.star_targets_tuple_seq()


                self.state = 2029
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2030
                self.match(PythonParser.LSQB)
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 18045184835195024) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 57) != 0):
                    self.state = 2031
                    self.star_targets_list_seq()


                self.state = 2034
                self.match(PythonParser.RSQB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def single_subscript_attribute_target(self):
            return self.getTypedRuleContext(PythonParser.Single_subscript_attribute_targetContext,0)


        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def single_target(self):
            return self.getTypedRuleContext(PythonParser.Single_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_single_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_target" ):
                return visitor.visitSingle_target(self)
            else:
                return visitor.visitChildren(self)




    def single_target(self):

        localctx = PythonParser.Single_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_single_target)
        try:
            self.state = 2043
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2037
                self.single_subscript_attribute_target()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2038
                self.match(PythonParser.NAME)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2039
                self.match(PythonParser.LPAR)
                self.state = 2040
                self.single_target()
                self.state = 2041
                self.match(PythonParser.RPAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_subscript_attribute_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_single_subscript_attribute_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_subscript_attribute_target" ):
                return visitor.visitSingle_subscript_attribute_target(self)
            else:
                return visitor.visitChildren(self)




    def single_subscript_attribute_target(self):

        localctx = PythonParser.Single_subscript_attribute_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_single_subscript_attribute_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2045
            self.t_primary(0)
            self.state = 2052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.state = 2046
                self.match(PythonParser.DOT)
                self.state = 2047
                self.match(PythonParser.NAME)
                pass
            elif token in [43]:
                self.state = 2048
                self.match(PythonParser.LSQB)
                self.state = 2049
                self.slices()
                self.state = 2050
                self.match(PythonParser.RSQB)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class T_primaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def genexp(self):
            return self.getTypedRuleContext(PythonParser.GenexpContext,0)


        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_t_primary

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitT_primary" ):
                return visitor.visitT_primary(self)
            else:
                return visitor.visitChildren(self)



    def t_primary(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.T_primaryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 376
        self.enterRecursionRule(localctx, 376, self.RULE_t_primary, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2055
            self.atom()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2074
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.T_primaryContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_t_primary)
                    self.state = 2057
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 2070
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                    if la_ == 1:
                        self.state = 2058
                        self.match(PythonParser.DOT)
                        self.state = 2059
                        self.match(PythonParser.NAME)
                        pass

                    elif la_ == 2:
                        self.state = 2060
                        self.match(PythonParser.LSQB)
                        self.state = 2061
                        self.slices()
                        self.state = 2062
                        self.match(PythonParser.RSQB)
                        pass

                    elif la_ == 3:
                        self.state = 2064
                        self.genexp()
                        pass

                    elif la_ == 4:
                        self.state = 2065
                        self.match(PythonParser.LPAR)
                        self.state = 2067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 31556018110599568) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 119537681) != 0):
                            self.state = 2066
                            self.arguments()


                        self.state = 2069
                        self.match(PythonParser.RPAR)
                        pass

             
                self.state = 2076
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Del_targetsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def del_target(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Del_targetContext)
            else:
                return self.getTypedRuleContext(PythonParser.Del_targetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_del_targets

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_targets" ):
                return visitor.visitDel_targets(self)
            else:
                return visitor.visitChildren(self)




    def del_targets(self):

        localctx = PythonParser.Del_targetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_del_targets)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2077
            self.del_target()
            self.state = 2082
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,271,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2078
                    self.match(PythonParser.COMMA)
                    self.state = 2079
                    self.del_target() 
                self.state = 2084
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,271,self._ctx)

            self.state = 2086
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==50:
                self.state = 2085
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_targetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def t_primary(self):
            return self.getTypedRuleContext(PythonParser.T_primaryContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def slices(self):
            return self.getTypedRuleContext(PythonParser.SlicesContext,0)


        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def del_t_atom(self):
            return self.getTypedRuleContext(PythonParser.Del_t_atomContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_del_target

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_target" ):
                return visitor.visitDel_target(self)
            else:
                return visitor.visitChildren(self)




    def del_target(self):

        localctx = PythonParser.Del_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_del_target)
        try:
            self.state = 2098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2088
                self.t_primary(0)
                self.state = 2095
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [48]:
                    self.state = 2089
                    self.match(PythonParser.DOT)
                    self.state = 2090
                    self.match(PythonParser.NAME)
                    pass
                elif token in [43]:
                    self.state = 2091
                    self.match(PythonParser.LSQB)
                    self.state = 2092
                    self.slices()
                    self.state = 2093
                    self.match(PythonParser.RSQB)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2097
                self.del_t_atom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Del_t_atomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def LPAR(self):
            return self.getToken(PythonParser.LPAR, 0)

        def del_target(self):
            return self.getTypedRuleContext(PythonParser.Del_targetContext,0)


        def RPAR(self):
            return self.getToken(PythonParser.RPAR, 0)

        def del_targets(self):
            return self.getTypedRuleContext(PythonParser.Del_targetsContext,0)


        def LSQB(self):
            return self.getToken(PythonParser.LSQB, 0)

        def RSQB(self):
            return self.getToken(PythonParser.RSQB, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_del_t_atom

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_t_atom" ):
                return visitor.visitDel_t_atom(self)
            else:
                return visitor.visitChildren(self)




    def del_t_atom(self):

        localctx = PythonParser.Del_t_atomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_del_t_atom)
        self._la = 0 # Token type
        try:
            self.state = 2115
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2100
                self.match(PythonParser.NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2101
                self.match(PythonParser.LPAR)
                self.state = 2102
                self.del_target()
                self.state = 2103
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2105
                self.match(PythonParser.LPAR)
                self.state = 2107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 30786325713040) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 57) != 0):
                    self.state = 2106
                    self.del_targets()


                self.state = 2109
                self.match(PythonParser.RPAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2110
                self.match(PythonParser.LSQB)
                self.state = 2112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 30786325713040) != 0) or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & 57) != 0):
                    self.state = 2111
                    self.del_targets()


                self.state = 2114
                self.match(PythonParser.RSQB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_expressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def DOUBLESTAR(self):
            return self.getToken(PythonParser.DOUBLESTAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_type_expressions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_expressions" ):
                return visitor.visitType_expressions(self)
            else:
                return visitor.visitChildren(self)




    def type_expressions(self):

        localctx = PythonParser.Type_expressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_type_expressions)
        self._la = 0 # Token type
        try:
            self.state = 2148
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 7, 8, 12, 17, 25, 35, 42, 43, 44, 52, 53, 66, 87, 90, 91, 92]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2117
                self.expression()
                self.state = 2122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,278,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2118
                        self.match(PythonParser.COMMA)
                        self.state = 2119
                        self.expression() 
                    self.state = 2124
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,278,self._ctx)

                self.state = 2137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 2125
                    self.match(PythonParser.COMMA)
                    self.state = 2135
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [54]:
                        self.state = 2126
                        self.match(PythonParser.STAR)
                        self.state = 2127
                        self.expression()
                        self.state = 2131
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==50:
                            self.state = 2128
                            self.match(PythonParser.COMMA)
                            self.state = 2129
                            self.match(PythonParser.DOUBLESTAR)
                            self.state = 2130
                            self.expression()


                        pass
                    elif token in [70]:
                        self.state = 2133
                        self.match(PythonParser.DOUBLESTAR)
                        self.state = 2134
                        self.expression()
                        pass
                    else:
                        raise NoViableAltException(self)



                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2139
                self.match(PythonParser.STAR)
                self.state = 2140
                self.expression()
                self.state = 2144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50:
                    self.state = 2141
                    self.match(PythonParser.COMMA)
                    self.state = 2142
                    self.match(PythonParser.DOUBLESTAR)
                    self.state = 2143
                    self.expression()


                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2146
                self.match(PythonParser.DOUBLESTAR)
                self.state = 2147
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Func_type_commentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NEWLINE(self):
            return self.getToken(PythonParser.NEWLINE, 0)

        def TYPE_COMMENT(self):
            return self.getToken(PythonParser.TYPE_COMMENT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_func_type_comment

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc_type_comment" ):
                return visitor.visitFunc_type_comment(self)
            else:
                return visitor.visitChildren(self)




    def func_type_comment(self):

        localctx = PythonParser.Func_type_commentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_func_type_comment)
        try:
            self.state = 2153
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [93]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2150
                self.match(PythonParser.NEWLINE)
                self.state = 2151
                self.match(PythonParser.TYPE_COMMENT)
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2152
                self.match(PythonParser.TYPE_COMMENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_type

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_type" ):
                return visitor.visitSoft_kw_type(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_type(self):

        localctx = PythonParser.Soft_kw_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_soft_kw_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2155
            if not this.isEqualToCurrentTokenText("type"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isEqualToCurrentTokenText(\"type\")")
            self.state = 2156
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_matchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_match

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_match" ):
                return visitor.visitSoft_kw_match(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_match(self):

        localctx = PythonParser.Soft_kw_matchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_soft_kw_match)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2158
            if not this.isEqualToCurrentTokenText("match"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isEqualToCurrentTokenText(\"match\")")
            self.state = 2159
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_caseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_case

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_case" ):
                return visitor.visitSoft_kw_case(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_case(self):

        localctx = PythonParser.Soft_kw_caseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_soft_kw_case)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2161
            if not this.isEqualToCurrentTokenText("case"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isEqualToCurrentTokenText(\"case\")")
            self.state = 2162
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw_wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw_wildcard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw_wildcard" ):
                return visitor.visitSoft_kw_wildcard(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw_wildcard(self):

        localctx = PythonParser.Soft_kw_wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_soft_kw_wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2164
            if not this.isEqualToCurrentTokenText("_"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isEqualToCurrentTokenText(\"_\")")
            self.state = 2165
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Soft_kw__not__wildcardContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_soft_kw__not__wildcard

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSoft_kw__not__wildcard" ):
                return visitor.visitSoft_kw__not__wildcard(self)
            else:
                return visitor.visitChildren(self)




    def soft_kw__not__wildcard(self):

        localctx = PythonParser.Soft_kw__not__wildcardContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_soft_kw__not__wildcard)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2167
            if not this.isnotEqualToCurrentTokenText("_"):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "this.isnotEqualToCurrentTokenText(\"_\")")
            self.state = 2168
            self.match(PythonParser.NAME)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[29] = self.dotted_name_sempred
        self._predicates[127] = self.bitwise_or_sempred
        self._predicates[128] = self.bitwise_xor_sempred
        self._predicates[129] = self.bitwise_and_sempred
        self._predicates[130] = self.shift_expr_sempred
        self._predicates[131] = self.sum_sempred
        self._predicates[132] = self.term_sempred
        self._predicates[136] = self.primary_sempred
        self._predicates[188] = self.t_primary_sempred
        self._predicates[194] = self.soft_kw_type_sempred
        self._predicates[195] = self.soft_kw_match_sempred
        self._predicates[196] = self.soft_kw_case_sempred
        self._predicates[197] = self.soft_kw_wildcard_sempred
        self._predicates[198] = self.soft_kw__not__wildcard_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

    def bitwise_or_sempred(self, localctx:Bitwise_orContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 2)
         

    def bitwise_xor_sempred(self, localctx:Bitwise_xorContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def bitwise_and_sempred(self, localctx:Bitwise_andContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 2)
         

    def shift_expr_sempred(self, localctx:Shift_exprContext, predIndex:int):
            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

    def sum_sempred(self, localctx:SumContext, predIndex:int):
            if predIndex == 5:
                return self.precpred(self._ctx, 2)
         

    def term_sempred(self, localctx:TermContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 2)
         

    def primary_sempred(self, localctx:PrimaryContext, predIndex:int):
            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

    def t_primary_sempred(self, localctx:T_primaryContext, predIndex:int):
            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

    def soft_kw_type_sempred(self, localctx:Soft_kw_typeContext, predIndex:int):
            if predIndex == 9:
                return this.isEqualToCurrentTokenText("type")
         

    def soft_kw_match_sempred(self, localctx:Soft_kw_matchContext, predIndex:int):
            if predIndex == 10:
                return this.isEqualToCurrentTokenText("match")
         

    def soft_kw_case_sempred(self, localctx:Soft_kw_caseContext, predIndex:int):
            if predIndex == 11:
                return this.isEqualToCurrentTokenText("case")
         

    def soft_kw_wildcard_sempred(self, localctx:Soft_kw_wildcardContext, predIndex:int):
            if predIndex == 12:
                return this.isEqualToCurrentTokenText("_")
         

    def soft_kw__not__wildcard_sempred(self, localctx:Soft_kw__not__wildcardContext, predIndex:int):
            if predIndex == 13:
                return this.isnotEqualToCurrentTokenText("_")
         




